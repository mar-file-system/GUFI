$ parallel_find -h
usage: parallel_find [options] input_dir...
options:
  -h, --help                        help
  -H, --debug                       show assigned input values (debugging)
  -v, --version                     version
  -n, --threads <threads>           number of threads
  -f, --format <FORMAT>             use the specified FORMAT instead of the default; output a newline after each use of FORMAT
      --min-level <min level>       minimum level to go down
      --max-level <max level>       maximum level to go down
  -t, --filter-type <filter_type>   one or more types to keep ('f', 'd', 'l')
  -o, --output-file <out_fname>     output file (one-per-thread, with thread-id suffix)
  -B, --buffer-size <buffer size>   size of each thread's output buffer in bytes

input_dir...      walk one or more trees to search files


$ parallel_find
usage: parallel_find [options] input_dir...
options:
  -h, --help                        help
  -H, --debug                       show assigned input values (debugging)
  -v, --version                     version
  -n, --threads <threads>           number of threads
  -f, --format <FORMAT>             use the specified FORMAT instead of the default; output a newline after each use of FORMAT
      --min-level <min level>       minimum level to go down
      --max-level <max level>       maximum level to go down
  -t, --filter-type <filter_type>   one or more types to keep ('f', 'd', 'l')
  -o, --output-file <out_fname>     output file (one-per-thread, with thread-id suffix)
  -B, --buffer-size <buffer size>   size of each thread's output buffer in bytes

input_dir...      walk one or more trees to search files


$ parallel_find -n 2 "prefix"
prefix
prefix/.hidden
prefix/1KB
prefix/1MB
prefix/directory
prefix/directory/executable
prefix/directory/readonly
prefix/directory/subdirectory
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name
prefix/directory/writable
prefix/empty_directory
prefix/file_symlink
prefix/leaf_directory
prefix/leaf_directory/leaf_file1
prefix/leaf_directory/leaf_file2
prefix/old_file
prefix/repeat_name
prefix/unusual#? directory ,
prefix/unusual#? directory ,/unusual, name?#

$ parallel_find -n 2 "prefix/1MB"
prefix/1MB

# comparing parallel_find result to find result
# link to a directory with slash at the end
$ parallel_find -n 2 "prefix/directory/subdirectory/directory_symlink/"
prefix/directory/subdirectory/directory_symlink/
prefix/directory/subdirectory/directory_symlink//directory_symlink
prefix/directory/subdirectory/directory_symlink//repeat_name

# link to a directory without slash at the end
$ parallel_find -n 2 "prefix/directory/subdirectory/directory_symlink"
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/directory_symlink/directory_symlink
prefix/directory/subdirectory/directory_symlink/repeat_name

# link to a file without slash at the end
$ parallel_find -n 2 "prefix/file_symlink"
prefix/file_symlink

# mix of files, dirs, links
$ parallel_find -n 2 "prefix/directory/subdirectory/directory_symlink" "prefix/1MB" "prefix/"
prefix/
prefix//.hidden
prefix//1KB
prefix//1MB
prefix//directory
prefix//directory/executable
prefix//directory/readonly
prefix//directory/subdirectory
prefix//directory/subdirectory/directory_symlink
prefix//directory/subdirectory/repeat_name
prefix//directory/writable
prefix//empty_directory
prefix//file_symlink
prefix//leaf_directory
prefix//leaf_directory/leaf_file1
prefix//leaf_directory/leaf_file2
prefix//old_file
prefix//repeat_name
prefix//unusual#? directory ,
prefix//unusual#? directory ,/unusual, name?#
prefix/1MB
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/directory_symlink/directory_symlink
prefix/directory/subdirectory/directory_symlink/repeat_name

# only get directories at level 2
$ parallel_find -n 2 -t d --min-level 2 --max-level 2 "prefix"
prefix/directory/subdirectory

# only get links
$ parallel_find -n 2 -t l "prefix"
prefix/directory/subdirectory/directory_symlink
prefix/file_symlink

# get links and files
$ parallel_find -n 2 -t lf "prefix"
prefix/.hidden
prefix/1KB
prefix/1MB
prefix/directory/executable
prefix/directory/readonly
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name
prefix/directory/writable
prefix/file_symlink
prefix/leaf_directory/leaf_file1
prefix/leaf_directory/leaf_file2
prefix/old_file
prefix/repeat_name
prefix/unusual#? directory ,/unusual, name?#

# remove starting path with newline
$ parallel_find -n 2 -f "%P\n" "prefix"

.hidden
1KB
1MB
directory
directory/executable
directory/readonly
directory/subdirectory
directory/subdirectory/directory_symlink
directory/subdirectory/repeat_name
directory/writable
empty_directory
file_symlink
leaf_directory
leaf_directory/leaf_file1
leaf_directory/leaf_file2
old_file
repeat_name
unusual#? directory ,
unusual#? directory ,/unusual, name?#

# print escape characters
$ parallel_find -n 2 -f "[\t\]\r\n" "prefix" | head -n 1
[	\]

# print non-format characters
$ parallel_find -n 2 -f "Path: %p\n" "prefix"
Path: prefix
Path: prefix/.hidden
Path: prefix/1KB
Path: prefix/1MB
Path: prefix/directory
Path: prefix/directory/executable
Path: prefix/directory/readonly
Path: prefix/directory/subdirectory
Path: prefix/directory/subdirectory/directory_symlink
Path: prefix/directory/subdirectory/repeat_name
Path: prefix/directory/writable
Path: prefix/empty_directory
Path: prefix/file_symlink
Path: prefix/leaf_directory
Path: prefix/leaf_directory/leaf_file1
Path: prefix/leaf_directory/leaf_file2
Path: prefix/old_file
Path: prefix/repeat_name
Path: prefix/unusual#? directory ,
Path: prefix/unusual#? directory ,/unusual, name?#

# level higher than the level of the tree
$ parallel_find -n 2 --min-level 10 "prefix"

# directory with multiple slashes
$ parallel_find -n 2 "prefix////"
prefix////
prefix/////.hidden
prefix/////1KB
prefix/////1MB
prefix/////directory
prefix/////directory/executable
prefix/////directory/readonly
prefix/////directory/subdirectory
prefix/////directory/subdirectory/directory_symlink
prefix/////directory/subdirectory/repeat_name
prefix/////directory/writable
prefix/////empty_directory
prefix/////file_symlink
prefix/////leaf_directory
prefix/////leaf_directory/leaf_file1
prefix/////leaf_directory/leaf_file2
prefix/////old_file
prefix/////repeat_name
prefix/////unusual#? directory ,
prefix/////unusual#? directory ,/unusual, name?#

# multiple starting paths
$ parallel_find -n 2 "prefix/directory/" "prefix/directory/subdirectory"
prefix/directory/
prefix/directory//executable
prefix/directory//readonly
prefix/directory//subdirectory
prefix/directory//subdirectory/directory_symlink
prefix/directory//subdirectory/repeat_name
prefix/directory//writable
prefix/directory/subdirectory
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name

# keep full path with newline
$ parallel_find -n 2 -f "%p\n" "prefix"
prefix
prefix/.hidden
prefix/1KB
prefix/1MB
prefix/directory
prefix/directory/executable
prefix/directory/readonly
prefix/directory/subdirectory
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name
prefix/directory/writable
prefix/empty_directory
prefix/file_symlink
prefix/leaf_directory
prefix/leaf_directory/leaf_file1
prefix/leaf_directory/leaf_file2
prefix/old_file
prefix/repeat_name
prefix/unusual#? directory ,
prefix/unusual#? directory ,/unusual, name?#

# write to output files
$ parallel_find -n 2 -o "parallel_find_output" "prefix"

$ cat parallel_find_output.0 parallel_find_output.1
prefix
prefix/.hidden
prefix/1KB
prefix/1MB
prefix/directory
prefix/directory/executable
prefix/directory/readonly
prefix/directory/subdirectory
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name
prefix/directory/writable
prefix/empty_directory
prefix/file_symlink
prefix/leaf_directory
prefix/leaf_directory/leaf_file1
prefix/leaf_directory/leaf_file2
prefix/old_file
prefix/repeat_name
prefix/unusual#? directory ,
prefix/unusual#? directory ,/unusual, name?#

# write to same output files
$ parallel_find -n 2 -o "parallel_find_output" "prefix"
"parallel_find_output.0" Already exists!
"parallel_find_output.1" Already exists!

# small output buffer
$ parallel_find -n 2 -B 16 "prefix"
prefix
prefix/.hidden
prefix/1KB
prefix/1MB
prefix/directory
prefix/directory/executable
prefix/directory/readonly
prefix/directory/subdirectory
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name
prefix/directory/writable
prefix/empty_directory
prefix/file_symlink
prefix/leaf_directory
prefix/leaf_directory/leaf_file1
prefix/leaf_directory/leaf_file2
prefix/old_file
prefix/repeat_name
prefix/unusual#? directory ,
prefix/unusual#? directory ,/unusual, name?#

# empty path
$ parallel_find -n 2 ""
Error: Cannot stat "": No such file or directory (2)

# nonexistent file
$ parallel_find -n 2 "prefix/nonexistent_file"
Error: Cannot stat "prefix/nonexistent_file": No such file or directory (2)

# single unsupported type
$ parallel_find -n 2 -t s "prefix" > /dev/null
s is not a valid option

# mix of supported and unsupported types
$ parallel_find -n 2 -t lfs "prefix" > /dev/null
s is not a valid option

# unknown escape character
$ parallel_find -n 2 -f "\d\n" "prefix" | head -n 1
\d

# unknown format specifier
$ parallel_find -n 2 -f "%Q\n" "prefix" | head -n 1
%Q

# bad format
$ parallel_find -n 2 -f "%" "prefix" 2>&1 | head -n 1
Error: bad format sequence at end

# bad output file (missing parent directories)
$ parallel_find -n 2 -o "non/existant/path/parallel_find_output" "prefix"
Could not open output file non/existant/path/parallel_find_output.0

# bad output file (actually a directory)
$ parallel_find -n 2 -o "parallel_find_outputdir" "prefix"
"parallel_find_outputdir.0" Already exists!
Destination path is not a file "parallel_find_outputdir.0"

# bad output buffer size
$ parallel_find -n 2 -B 18446744073709551615 "prefix"
Error: Could not initialize 2 output buffers

# bad thread count
$ parallel_find -n 18446744073709551615 "prefix"
Could not allocate space for 18446744073709551615 files

# bad input file type
$ parallel_find -n 2 "/dev/null"
Error: Unsupported type for "/dev/null"

