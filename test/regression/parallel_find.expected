$ parallel_find -h
usage: parallel_find [options] input_dir...
options:
  -h, --help                        help
  -H, --debug                       show assigned input values (debugging)
  -v, --version                     version
  -n, --threads <threads>           number of threads
      --min-level <min level>       minimum level to go down
      --max-level <max level>       maximum level to go down
  -t, --filter-type <filter_type>   one or more types to keep ('f', 'd', 'l')
      --format <FORMAT>             use the specified FORMAT instead of the default; output a newline after each use of FORMAT
  -o, --output-file <out_fname>     output file (one-per-thread, with thread-id suffix)
      --output-buffer-size <bytes>  size of each thread's output buffer in bytes

input_dir...      walk one or more trees to search files


$ parallel_find
usage: parallel_find [options] input_dir...
options:
  -h, --help                        help
  -H, --debug                       show assigned input values (debugging)
  -v, --version                     version
  -n, --threads <threads>           number of threads
      --min-level <min level>       minimum level to go down
      --max-level <max level>       maximum level to go down
  -t, --filter-type <filter_type>   one or more types to keep ('f', 'd', 'l')
      --format <FORMAT>             use the specified FORMAT instead of the default; output a newline after each use of FORMAT
  -o, --output-file <out_fname>     output file (one-per-thread, with thread-id suffix)
      --output-buffer-size <bytes>  size of each thread's output buffer in bytes

input_dir...      walk one or more trees to search files


$ parallel_find -n 2 "prefix"
prefix
prefix/.hidden
prefix/1KB
prefix/1MB
prefix/directory
prefix/directory/executable
prefix/directory/readonly
prefix/directory/subdirectory
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name
prefix/directory/writable
prefix/empty_directory
prefix/file_symlink
prefix/leaf_directory
prefix/leaf_directory/leaf_file1
prefix/leaf_directory/leaf_file2
prefix/old_file
prefix/repeat_name
prefix/unusual#? directory ,
prefix/unusual#? directory ,/unusual, name?#

$ parallel_find -n 2 "prefix/1MB"
prefix/1MB

# comparing parallel_find result to find result
# link to a directory with slash at the end
$ parallel_find -n 2 "prefix/directory/subdirectory/directory_symlink/"
prefix/directory/subdirectory/directory_symlink/
prefix/directory/subdirectory/directory_symlink//directory_symlink
prefix/directory/subdirectory/directory_symlink//repeat_name

# link to a directory without slash at the end
$ parallel_find -n 2 "prefix/directory/subdirectory/directory_symlink"
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/directory_symlink/directory_symlink
prefix/directory/subdirectory/directory_symlink/repeat_name

# link to a file without slash at the end
$ parallel_find -n 2 "prefix/file_symlink"
prefix/file_symlink

# mix of files, dirs, links
$ parallel_find -n 2 "prefix/directory/subdirectory/directory_symlink" "prefix/1MB" "prefix/"
prefix/
prefix//.hidden
prefix//1KB
prefix//1MB
prefix//directory
prefix//directory/executable
prefix//directory/readonly
prefix//directory/subdirectory
prefix//directory/subdirectory/directory_symlink
prefix//directory/subdirectory/repeat_name
prefix//directory/writable
prefix//empty_directory
prefix//file_symlink
prefix//leaf_directory
prefix//leaf_directory/leaf_file1
prefix//leaf_directory/leaf_file2
prefix//old_file
prefix//repeat_name
prefix//unusual#? directory ,
prefix//unusual#? directory ,/unusual, name?#
prefix/1MB
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/directory_symlink/directory_symlink
prefix/directory/subdirectory/directory_symlink/repeat_name

# only get directories at level 2
$ parallel_find -n 2 -t d --min-level 2 --max-level 2 "prefix"
prefix/directory/subdirectory

# only get links
$ parallel_find -n 2 -t l "prefix"
prefix/directory/subdirectory/directory_symlink
prefix/file_symlink

# get links and files
$ parallel_find -n 2 -t lf "prefix"
prefix/.hidden
prefix/1KB
prefix/1MB
prefix/directory/executable
prefix/directory/readonly
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name
prefix/directory/writable
prefix/file_symlink
prefix/leaf_directory/leaf_file1
prefix/leaf_directory/leaf_file2
prefix/old_file
prefix/repeat_name
prefix/unusual#? directory ,/unusual, name?#

# print escape characters
$ parallel_find -n 2 --format '\a\b\f\t\v\\\r\n\cshould not show\n' "prefix" | head -n 1 | hexlify.py
00000000 0708 0c09 0b5c 0d0a
00000008

# print numeric % directives
$ parallel_find -n 2 --format "%% %a %b %c %D %i %n %t\n" "prefix" | head -n 1 | sed 's%\b[0-9]\+\b%0%g;'
% 0 0 0 0 0 0 0

# print uid % directives
$ parallel_find -n 2 --format "%u %U\n" "prefix" | head -n 1
user 1001

# print gid % directives
$ parallel_find -n 2 --format "%g %G\n" "prefix" | head -n 1
group 1001

# print path % directives for non-symlinks
$ parallel_find -n 2 -t fd --format "%H %d %h %f %p %P %m %M %y\n" "prefix"
prefix 0  prefix prefix  775 drwxrwxr-x d
prefix 1 prefix/ .hidden prefix/.hidden .hidden 664 -rw-rw-r-- f
prefix 1 prefix/ 1KB prefix/1KB 1KB 664 -rw-rw-r-- f
prefix 1 prefix/ 1MB prefix/1MB 1MB 664 -rw-rw-r-- f
prefix 1 prefix/ directory prefix/directory directory 775 drwxrwxr-x d
prefix 1 prefix/ empty_directory prefix/empty_directory empty_directory 775 drwxrwxr-x d
prefix 1 prefix/ leaf_directory prefix/leaf_directory leaf_directory 775 drwxrwxr-x d
prefix 1 prefix/ old_file prefix/old_file old_file 664 -rw-rw-r-- f
prefix 1 prefix/ repeat_name prefix/repeat_name repeat_name 664 -rw-rw-r-- f
prefix 1 prefix/ unusual#? directory , prefix/unusual#? directory , unusual#? directory , 775 drwxrwxr-x d
prefix 2 prefix/directory/ executable prefix/directory/executable directory/executable 777 -rwxrwxrwx f
prefix 2 prefix/directory/ readonly prefix/directory/readonly directory/readonly 444 -r--r--r-- f
prefix 2 prefix/directory/ subdirectory prefix/directory/subdirectory directory/subdirectory 775 drwxrwxr-x d
prefix 2 prefix/directory/ writable prefix/directory/writable directory/writable 666 -rw-rw-rw- f
prefix 2 prefix/leaf_directory/ leaf_file1 prefix/leaf_directory/leaf_file1 leaf_directory/leaf_file1 664 -rw-rw-r-- f
prefix 2 prefix/leaf_directory/ leaf_file2 prefix/leaf_directory/leaf_file2 leaf_directory/leaf_file2 664 -rw-rw-r-- f
prefix 2 prefix/unusual#? directory ,/ unusual, name?# prefix/unusual#? directory ,/unusual, name?# unusual#? directory ,/unusual, name?# 664 -rw-rw-r-- f
prefix 3 prefix/directory/subdirectory/ repeat_name prefix/directory/subdirectory/repeat_name directory/subdirectory/repeat_name 664 -rw-rw-r-- f

# print path % directives for symlinks
$ parallel_find -n 2 -t l --format "%p %l %m %M\n" "prefix" | awk '{ $3=777; $4="lrwxrwxrwx"; print }'
prefix/directory/subdirectory/directory_symlink prefix/directory/subdirectory 777 lrwxrwxrwx
prefix/file_symlink prefix/1KB 777 lrwxrwxrwx

# level higher than the level of the tree
$ parallel_find -n 2 --min-level 10 "prefix"

# directory with multiple slashes
$ parallel_find -n 2 "prefix////"
prefix////
prefix/////.hidden
prefix/////1KB
prefix/////1MB
prefix/////directory
prefix/////directory/executable
prefix/////directory/readonly
prefix/////directory/subdirectory
prefix/////directory/subdirectory/directory_symlink
prefix/////directory/subdirectory/repeat_name
prefix/////directory/writable
prefix/////empty_directory
prefix/////file_symlink
prefix/////leaf_directory
prefix/////leaf_directory/leaf_file1
prefix/////leaf_directory/leaf_file2
prefix/////old_file
prefix/////repeat_name
prefix/////unusual#? directory ,
prefix/////unusual#? directory ,/unusual, name?#

# multiple starting paths
$ parallel_find -n 2 "prefix/directory/" "prefix/directory/subdirectory"
prefix/directory/
prefix/directory//executable
prefix/directory//readonly
prefix/directory//subdirectory
prefix/directory//subdirectory/directory_symlink
prefix/directory//subdirectory/repeat_name
prefix/directory//writable
prefix/directory/subdirectory
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name

# write to output files
$ parallel_find -n 2 -o "parallel_find_output" "prefix"

$ cat parallel_find_output.0 parallel_find_output.1
prefix
prefix/.hidden
prefix/1KB
prefix/1MB
prefix/directory
prefix/directory/executable
prefix/directory/readonly
prefix/directory/subdirectory
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name
prefix/directory/writable
prefix/empty_directory
prefix/file_symlink
prefix/leaf_directory
prefix/leaf_directory/leaf_file1
prefix/leaf_directory/leaf_file2
prefix/old_file
prefix/repeat_name
prefix/unusual#? directory ,
prefix/unusual#? directory ,/unusual, name?#

# write to same output files
$ parallel_find -n 2 -o "parallel_find_output" "prefix"
"parallel_find_output.0" Already exists!
"parallel_find_output.1" Already exists!

# small output buffer
$ parallel_find -n 2 --output-buffer-size 16 "prefix"
prefix
prefix/.hidden
prefix/1KB
prefix/1MB
prefix/directory
prefix/directory/executable
prefix/directory/readonly
prefix/directory/subdirectory
prefix/directory/subdirectory/directory_symlink
prefix/directory/subdirectory/repeat_name
prefix/directory/writable
prefix/empty_directory
prefix/file_symlink
prefix/leaf_directory
prefix/leaf_directory/leaf_file1
prefix/leaf_directory/leaf_file2
prefix/old_file
prefix/repeat_name
prefix/unusual#? directory ,
prefix/unusual#? directory ,/unusual, name?#

# empty path
$ parallel_find -n 2 ""
Error: Cannot stat "": No such file or directory (2)

# nonexistent file
$ parallel_find -n 2 "prefix/nonexistent_file"
Error: Cannot stat "prefix/nonexistent_file": No such file or directory (2)

# single unsupported type
$ parallel_find -n 2 -t s "prefix" > /dev/null
s is not a valid option

# mix of supported and unsupported types
$ parallel_find -n 2 -t lfs "prefix" > /dev/null
s is not a valid option

# unknown escape character
$ parallel_find -n 2 --format "\d\n" "prefix" | head -n 1
\d

# unknown format specifier
$ parallel_find -n 2 --format "%Q\n" "prefix" | head -n 1
%Q

# bad format
$ parallel_find -n 2 --format "%" "prefix" 2>&1 | head -n 1
Error: bad format sequence at end

# bad output file (missing parent directories)
$ parallel_find -n 2 -o "non/existant/path/parallel_find_output" "prefix"
Could not open output file non/existant/path/parallel_find_output.0

# bad output file (actually a directory)
$ parallel_find -n 2 -o "parallel_find_outputdir" "prefix"
"parallel_find_outputdir.0" Already exists!
Destination path is not a file "parallel_find_outputdir.0"

# bad output buffer size
$ parallel_find -n 2 --output-buffer-size 18446744073709551615 "prefix"
Error: Could not initialize 2 output buffers

# bad thread count
$ parallel_find -n 18446744073709551615 "prefix"
Could not allocate space for 18446744073709551615 files

# bad input file type
$ parallel_find -n 2 "/dev/null"
Error: Unsupported type for "/dev/null"

