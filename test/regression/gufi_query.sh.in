#!/usr/bin/env bash
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



set -e
source @CMAKE_CURRENT_BINARY_DIR@/setup.sh 1

OUTPUT="gufi_query.out"

(
touch "${INDEXROOT}/file" # ignored when walking index

echo "# ${GUFI_QUERY} help" | replace
run_no_sort "${GUFI_QUERY}"

echo "# Walk without returning results"
run_sort "${GUFI_QUERY} \"${INDEXROOT}\""

echo "# Get only directories"
run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT name FROM vrsummary;\" \"${INDEXROOT}\""

echo "# Get only non-directories"
run_sort "${GUFI_QUERY} -d \" \" -E \"SELECT name FROM vrpentries;\" \"${INDEXROOT}\""

echo "# Get all directory and non-directory names"
run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT name FROM vrsummary;\" -E \"SELECT name FROM vrpentries;\" \"${INDEXROOT}\""

echo "# Get number of subdirectories"
run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT rpath(sname, sroll), subdirs_walked() FROM vrsummary;\" \"${INDEXROOT}\""

echo "# Get relative paths of all directories and non-directories ascending names"
run_no_sort "${GUFI_QUERY} -d \" \" -a -I \"CREATE TABLE out(path TEXT);\" -K \"CREATE TABLE aggregate(path TEXT);\" -S \"INSERT INTO out SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"INSERT INTO out SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" -J \"INSERT INTO aggregate SELECT path FROM out;\" -G \"SELECT path FROM aggregate ORDER BY path ASC;\" \"${INDEXROOT}\""

echo "# Get relative paths of all directories and non-directories descending names"
run_no_sort "${GUFI_QUERY} -d \" \" -a -I \"CREATE TABLE out(path TEXT);\" -K \"CREATE TABLE aggregate(path TEXT);\" -S \"INSERT INTO out SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"INSERT INTO out SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" -J \"INSERT INTO aggregate SELECT path FROM out;\" -G \"SELECT path FROM aggregate ORDER BY path DESC;\" \"${INDEXROOT}\""

echo "# Get relative paths of all directories and non-directories ascending sizes (files only)"
run_no_sort "${GUFI_QUERY} -d \" \" -a -I \"CREATE TABLE out(path TEXT, size INT64);\" -K \"CREATE TABLE aggregate(path TEXT, size INT64);\" -E \"INSERT INTO out SELECT rpath(sname, sroll) || '/' || name, size FROM vrpentries WHERE (type == 'f');\" -J \"INSERT INTO aggregate SELECT path, size FROM out;\" -G \"SELECT path FROM aggregate ORDER BY size ASC, path ASC;\" \"${INDEXROOT}\""

echo "# Get relative paths of all directories and non-directories descending sizes (files only)"
run_no_sort "${GUFI_QUERY} -d \" \" -a -I \"CREATE TABLE out(path TEXT, size INT64);\" -K \"CREATE TABLE aggregate(path TEXT, size INT64);\" -E \"INSERT INTO out SELECT rpath(sname, sroll) || '/' || name, size FROM vrpentries WHERE (type == 'f');\" -J \"INSERT INTO aggregate SELECT path, size FROM out;\" -G \"SELECT path FROM aggregate ORDER BY size DESC, path ASC;\" \"${INDEXROOT}\""

echo "# Get all directory and non-directory names not in directory"
run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" -k \"${SKIP}\" \"${INDEXROOT}\""

echo "# Get all directory and non-directory names and their xattrs"
run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT rpath(sname, sroll), xattr_name, xattr_value FROM vrxsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name, xattr_name, xattr_value FROM vrxpentries;\" -x \"${INDEXROOT}\""

echo "#####################################"
echo "# Invalid Inputs                    #"
echo "#####################################"

echo "# Bad directory"
run_no_sort "${GUFI_QUERY} \"${INDEXROOT}/baddirectory\""

echo "# Path is a file"
run_no_sort "${GUFI_QUERY} \"${INDEXROOT}/db.db\""

echo "# Missing -I (outdb)"
run_no_sort "${GUFI_QUERY} -O outdb \"${INDEXROOT}\""

echo "# Missing -I (aggregating, stdout)"
run_no_sort "${GUFI_QUERY}                                                  -K \"create;\"              \"${INDEXROOT}\""

echo "# Missing -I (aggregating, outfile)"
run_no_sort "${GUFI_QUERY} -o outfile                                       -K \"create;\"              \"${INDEXROOT}\""

echo "# Missing -I (aggregating, outdb)"
run_no_sort "${GUFI_QUERY} -O outdb                                         -K \"create;\"              \"${INDEXROOT}\""

echo "# Missing -J (aggregate, stdout)"
run_no_sort "${GUFI_QUERY}            -I \"create\" -S \"insert;\" -E \"insert;\" -K \"create;\" -G \"query;\"  \"${INDEXROOT}\""

echo "# Missing -J (aggregate, outfile)"
run_no_sort "${GUFI_QUERY} -o outfile -I \"create\" -S \"insert;\" -E \"insert;\" -K \"create;\" -G \"query;\"  \"${INDEXROOT}\""

echo "# Missing -J (aggregate, outdb)"
run_no_sort "${GUFI_QUERY} -O outdb   -I \"create\" -S \"insert;\" -E \"insert;\" -K \"create;\"              \"${INDEXROOT}\""

echo "# Missing -G (aggregate, stdout)"
run_no_sort "${GUFI_QUERY}            -I \"create\" -S \"insert;\" -E \"insert;\" -K \"create;\" -J \"insert;\" \"${INDEXROOT}\""

echo "# Missing -G (aggregate, outfile)"
run_no_sort "${GUFI_QUERY} -o outfile -I \"create\" -S \"insert;\" -E \"insert;\" -K \"create;\" -J \"insert;\" \"${INDEXROOT}\""

echo "# Bad skip file"
run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" -k \"${SKIP}.bad\" \"${INDEXROOT}\""

echo "#####################################"
echo "# Extra Inputs                      #"
echo "#####################################"

(
echo "# Have -J even though not aggregating (stdout)"
run_no_sort "${GUFI_QUERY}            -I \"create\" -S \"insert;\" -E \"insert;\"              -J \"insert;\" \"${INDEXROOT}\""

echo "# Have -J even though not aggregating (outfile)"
run_no_sort "${GUFI_QUERY} -o outfile -I \"create\" -S \"insert;\" -E \"insert;\"              -J \"insert;\" \"${INDEXROOT}\""

echo "# Have -J even though not aggregating (outdb)"
run_no_sort "${GUFI_QUERY} -O outdb   -I \"create\" -S \"insert;\" -E \"insert;\"              -J \"insert;\" \"${INDEXROOT}\""

echo "# Have -G even though not aggregating (stdout)"
run_no_sort "${GUFI_QUERY}            -I \"create\" -S \"insert;\" -E \"insert;\"              -G \"query;\"  \"${INDEXROOT}\""

echo "# Have -G even though not aggregating (outfile)"
run_no_sort "${GUFI_QUERY} -o outfile -I \"create\" -S \"insert;\" -E \"insert;\"              -G \"query;\"  \"${INDEXROOT}\""

echo "# Have -G even though not aggregating (outdb)"
run_no_sort "${GUFI_QUERY} -O outdb   -I \"create\" -S \"insert;\" -E \"insert;\"              -G \"query;\"  \"${INDEXROOT}\""
)

echo "#####################################"
echo "# Modify Index                      #"
echo "#####################################"

echo "# Attempt to modify databases in read-only mode"
run_sort "${GUFI_QUERY} -a -S \"UPDATE summary SET inode = 0;\" -E \"UPDATE entries SET inode = 0;\" \"${INDEXROOT}\""

echo "# Use write mode to modify databases"
run_sort "${GUFI_QUERY} -a -w -S \"UPDATE summary SET inode = 0;\" -E \"UPDATE entries SET inode = 0;\" \"${INDEXROOT}\""

echo "# Negative check to see if changes have been applied"
run_sort "${GUFI_QUERY} -a -d \" \" -S \"SELECT rpath(sname, sroll), inode FROM vrsummary WHERE inode != 0;\" -E \"SELECT rpath(sname, sroll) || '/' || name, inode FROM vrpentries WHERE inode != 0;\" \"${INDEXROOT}\""

echo "# Positive check to see if changes have been applied"
run_sort "${GUFI_QUERY} -a -d \" \" -S \"SELECT rpath(sname, sroll), inode FROM vrsummary WHERE inode == 0;\" -E \"SELECT rpath(sname, sroll) || '/' || name, inode FROM vrpentries WHERE inode == 0;\" \"${INDEXROOT}\""
) |& tee "${OUTPUT}"

@DIFF@ @CMAKE_CURRENT_BINARY_DIR@/gufi_query.expected "${OUTPUT}"
rm "${OUTPUT}"
