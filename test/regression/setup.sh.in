#!/usr/bin/env bash
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



# source this file in regression test scripts

set -e

if [[ "$#" -ne "1" ]]
then
    echo "Syntax: $0 <generate index>" 1>&2
    exit 1
fi

GENERATE_INDEX="$1"

# CMake paths
BINARY_DIR="@CMAKE_BINARY_DIR@"
CURRENT_BINARY_DIR="@CMAKE_CURRENT_BINARY_DIR@"

. "${CURRENT_BINARY_DIR}/os_specific.sh"

SRCDIR="prefix"
BASENAME="$(basename ${SRCDIR})"
THREADS=2

TRACE="trace"
BADTRACE="badtrace"
TRACES=()
for (( i = 0; i < THREADS; i++ ));
do
    TRACES+=("${TRACE}.${i}")
done
DELIM="|"
# shellcheck disable=SC2034
BADDELIM="&" # should not show up in path names and should be printable character

SEARCH="search"
INDEXROOT="${SEARCH}/${BASENAME}"

# skip file (list of directory basenames)
SKIP="skip"

# shellcheck disable=SC2034
USER_ID="$(id -u)"
# shellcheck disable=SC2034
USER_NAME="$(id -un)"
# shellcheck disable=SC2034
GROUP_ID="$(id -g)"
# shellcheck disable=SC2034
GROUP_NAME="$(id -gn)"
# shellcheck disable=SC2034
TEST_USER_ID="1001"
# shellcheck disable=SC2034
TEST_USER_NAME="user"
# shellcheck disable=SC2034
TEST_GROUP_ID="${TEST_USER_ID}"
# shellcheck disable=SC2034
TEST_GROUP_NAME="group"

# shellcheck disable=SC2034
DISTRIBUTED_LEVEL=1
DISTRIBUTED_PREFIX="distributed"
DISTRIBUTED_0="${DISTRIBUTED_PREFIX}.0"
DISTRIBUTED_1="${DISTRIBUTED_PREFIX}.1"

# always clean up
setup_cleanup() {
    rm -rf "${CONFIG}" "${SRCDIR}" "${TRACE}" "${TRACES[@]}" "${BADTRACE}" "${SEARCH}" "${SKIP}" "${DISTRIBUTED_PREFIX}" "${DISTRIBUTED_0}" "${DISTRIBUTED_1}"
}

trap setup_cleanup EXIT

setup_cleanup

umask 002
export TZ=UTC
export LC_ALL="C"
export PATH="${BINARY_DIR}/scripts:${PATH}"
export PYTHONPATH="${BINARY_DIR}/scripts:${CURRENT_BINARY_DIR}:${PYTHONPATH}"

# fill in skip file here (after setup_cleanup)
echo "directory" > "${SKIP}"

# paths of all executables
GUFI_TOOL="${CURRENT_BINARY_DIR}/gufi_tool.py"
HEXLIFY="${CURRENT_BINARY_DIR}/hexlify.py"
SQLITE3="@DEP_INSTALL_PREFIX@/sqlite3/bin/sqlite3"

DELUIDGIDSUMMARYRECS="${BINARY_DIR}/examples/deluidgidsummaryrecs"
GENERATEGIDSUMMARY="${BINARY_DIR}/examples/generategidsummary"
GENERATETREE="${CURRENT_BINARY_DIR}/generatetree.sh"
GENERATEUIDSUMMARY="${BINARY_DIR}/examples/generateuidsummary"
GENGIDSUMMARYAVOIDENTRIESSCAN="${BINARY_DIR}/examples/gengidsummaryavoidentriesscan"
GENUIDSUMMARYAVOIDENTRIESSCAN="${BINARY_DIR}/examples/genuidsummaryavoidentriesscan"
GROUPFILESPACEHOG="${BINARY_DIR}/examples/groupfilespacehog"
GROUPFILESPACEHOGUSESUMMARY="${BINARY_DIR}/examples/groupfilespacehogusesummary"
GUFI_DIR2INDEX="${BINARY_DIR}/src/gufi_dir2index"
GUFI_DIR2TRACE="${BINARY_DIR}/src/gufi_dir2trace"
GUFI_DU="${GUFI_TOOL} du"
GUFI_FIND="${GUFI_TOOL} find"
GUFI_GETFATTR="${GUFI_TOOL} getfattr"
GUFI_INDEX2DIR="${BINARY_DIR}/src/gufi_index2dir"
GUFI_JAIL="${BINARY_DIR}/scripts/gufi_jail"
GUFI_LS="${GUFI_TOOL} ls"
GUFI_QUERY="${BINARY_DIR}/src/gufi_query"
GUFI_QUERY_PY="${GUFI_TOOL} query.py"
GUFI_ROLLUP="${BINARY_DIR}/src/gufi_rollup"
GUFI_SQLITE3="${BINARY_DIR}/src/gufi_sqlite3"
GUFI_STAT="${GUFI_TOOL} stat"
GUFI_STATS="${GUFI_TOOL} stats"
GUFI_STAT_BIN="${BINARY_DIR}/src/gufi_stat_bin"
GUFI_TRACE2DIR="${BINARY_DIR}/src/gufi_trace2dir"
GUFI_TRACE2INDEX="${BINARY_DIR}/src/gufi_trace2index"
GUFI_TREESUMMARY="${BINARY_DIR}/src/gufi_treesummary"
GUFI_TREESUMMARY_ALL="${BINARY_DIR}/src/gufi_treesummary_all"
GUFI_UNROLLUP="${BINARY_DIR}/src/gufi_unrollup"
GUFI_VT="${BINARY_DIR}/src/gufi_vt"
LONGITUDINAL_SNAPSHOT="${BINARY_DIR}/contrib/stats/snapshot.py"
OLDBIGFILES="${BINARY_DIR}/examples/oldbigfiles"
PARALLEL_CPR="${BINARY_DIR}/src/parallel_cpr"
PARALLEL_FIND="${BINARY_DIR}/src/parallel_find"
PARALLEL_RMR="${BINARY_DIR}/src/parallel_rmr"
PUGSQL="${GUFI_TOOL} pugsql"
QUERYDBS="${GUFI_TOOL} querydbs"
RUN_VT="${BINARY_DIR}/src/run_vt"
SBATCH_FAKE="${BINARY_DIR}/test/regression/sbatch.fake"
SPLIT_TRACE="${BINARY_DIR}/contrib/split_trace"
SQLALCHEMY="${GUFI_TOOL} sqlalchemy"
TREEDIFF="${BINARY_DIR}/contrib/treediff"
USERFILESPACEHOG="${BINARY_DIR}/examples/userfilespacehog"
USERFILESPACEHOGUSESUMMARY="${BINARY_DIR}/examples/userfilespacehogusesummary"
VERIFYTRACE="${BINARY_DIR}/contrib/verifytrace"
VERIFYTRACEINTREE="${BINARY_DIR}/contrib/verifytraceintree"

# distributed
FIND_SH="${BINARY_DIR}/scripts/distributed/find.sh"
SSH_FAKE="${BINARY_DIR}/test/regression/ssh.fake"
GUFI_DIR2INDEX_DISTRIBUTED="${BINARY_DIR}/scripts/distributed/gufi_dir2index"
GUFI_DIR2TRACE_DISTRIBUTED="${BINARY_DIR}/scripts/distributed/gufi_dir2trace"
GUFI_QUERY_DISTRIBUTED="${BINARY_DIR}/scripts/distributed/gufi_query"
GUFI_ROLLUP_DISTRIBUTED="${BINARY_DIR}/scripts/distributed/gufi_rollup"
GUFI_TREESUMMARY_ALL_DISTRIBUTED="${BINARY_DIR}/scripts/distributed/gufi_treesummary_all"
GUFI_UNROLLUP_DISTRIBUTED="${BINARY_DIR}/scripts/distributed/gufi_unrollup"

# this is created and deleted by the test
TEST_GUFI_JAIL="${CURRENT_BINARY_DIR}/gufi_jail"

AWK="@AWK@"
COLUMN="@COLUMN@"
DIFF="@DIFF@"
GREP="@GREP@"
SED="@SED@"
STAT="@STAT@"

PWD="$(pwd)"

# generate a fake config file
# shellcheck disable=SC2046
CONFIG="$(python3 -c 'import gufi_tool, os; print(os.path.realpath(gufi_tool.CONFIG_PATH))')"
(
    echo "Threads=1"
    echo "Query=${GUFI_QUERY}"
    echo "Sqlite3=${GUFI_SQLITE3}"
    echo "Stat=${GUFI_STAT_BIN}"
    echo "IndexRoot=${SEARCH}"
    echo "OutputBuffer=4096"
) > "${CONFIG}"
chmod 666 "${CONFIG}"

# common strings that need replacing
replace() {
    @SED@ "
    # GUFI_TOOL does not show up as itself
    s%${HEXLIFY}%hexlify.py%g;
    s%${SQLITE3}%sqlite3%g;

    s%${DELUIDGIDSUMMARYRECS}%deluidgidsummaryrecs%g;
    s%${GENERATEGIDSUMMARY}%generategidsummary%g;
    s%${GENERATETREE}%generatetree%g;
    s%${GENERATEUIDSUMMARY}%generateuidsummary%g;
    s%${GENGIDSUMMARYAVOIDENTRIESSCAN}%gengidsummaryavoidentriesscan%g;
    s%${GENUIDSUMMARYAVOIDENTRIESSCAN}%genuidsummaryavoidentriesscan%g;
    s%${GROUPFILESPACEHOG}%groupfilespacehog%g;
    s%${GROUPFILESPACEHOGUSESUMMARY}%groupfilespacehogusesummary%g;
    s%${GUFI_DIR2INDEX}%gufi_dir2index%g;
    s%${GUFI_DIR2TRACE}%gufi_dir2trace%g;
    s%${GUFI_DU}%gufi_du%g;
    s%${GUFI_FIND}%gufi_find%g;
    s%${GUFI_GETFATTR}%gufi_getfattr%g;
    s%${GUFI_INDEX2DIR}%gufi_index2dir%g;
    s%${GUFI_JAIL}%gufi_jail%g;
    s%${GUFI_LS}%gufi_ls%g;
    s%${GUFI_QUERY}%gufi_query%g;
    s%${GUFI_QUERY_PY}%gufi_query.py%g;
    s%${GUFI_ROLLUP}%gufi_rollup%g;
    s%${GUFI_SQLITE3}%gufi_sqlite3%g
    s%${GUFI_STAT}%gufi_stat%g;
    s%${GUFI_STATS}%gufi_stats%g;
    s%${GUFI_STAT_BIN}%gufi_stat_bin%g
    s%${GUFI_TEST_PLUGIN}%gufi_test_plugin%g;
    s%${GUFI_TRACE2DIR}%gufi_trace2dir%g;
    s%${GUFI_TRACE2INDEX}%gufi_trace2index%g;
    s%${GUFI_TREESUMMARY}%gufi_treesummary%g;
    s%${GUFI_TREESUMMARY_ALL}%gufi_treesummary_all%g;
    s%${GUFI_UNROLLUP}%gufi_unrollup%g;
    s%${GUFI_VT}%gufi_vt%g;
    s%${LONGITUDINAL_SNAPSHOT}%longitudinal_snapshot.py%g;
    s%${OLDBIGFILES}%oldbigfiles%g;
    s%${PARALLEL_CPR}%parallel_cpr%g;
    s%${PARALLEL_FIND}%parallel_find%g;
    s%${PARALLEL_RMR}%parallel_rmr%g;
    s%${PUGSQL}%pugsql%g;
    s%${QUERYDBS}%querydbs%g;
    s%${RUN_VT}%run_vt%g;
    s%${SBATCH_FAKE}%sbatch%g;
    s%${SPLIT_TRACE}%split_trace%g;
    s%${SQLALCHEMY}%gufi_vt_sqlalchemy%g;
    s%${TREEDIFF}%treediff%g;
    s%${USERFILESPACEHOG}%userfilespacehog%g;
    s%${USERFILESPACEHOGUSESUMMARY}%userfilespacehogusesummary%g;
    s%${VERIFYTRACE}%verifytrace%g;
    s%${VERIFYTRACEINTREE}%verifytraceintree%g;

    s%${FIND_SH}%find.sh%g;
    s%${SSH_FAKE}%ssh%g;
    s%${GUFI_DIR2INDEX_DISTRIBUTED}%gufi_dir2index_distributed%g;
    s%${GUFI_DIR2TRACE_DISTRIBUTED}%gufi_dir2trace_distributed%g;
    s%${GUFI_QUERY_DISTRIBUTED}%gufi_query_distributed%g;
    s%${GUFI_ROLLUP_DISTRIBUTED}%gufi_rollup_distributed%g;
    s%${GUFI_TREESUMMARY_ALL_DISTRIBUTED}%gufi_treesummary_all_distributed%g;
    s%${GUFI_UNROLLUP_DISTRIBUTED}%gufi_unrollup_distributed%g;

    s%${TEST_GUFI_JAIL}%gufi_jail%g;

    s%&vfs=.*%%g;
    \%-e                          compress work items%d;
    \%Started [0-9]* threads. Successfully completed [0-9]* threads.%d;

    s%${INDEXROOT}%${SRCDIR}%g;
    s%${CONFIG}%/etc/GUFI/config%g;
    s%${PWD}/%%g;

    s%${AWK}%awk%g;
    s%${BASH}%bash%g;
    s%${COLUMN}%column%g;
    s%${DIFF}%diff%g;
    s%${GREP}%grep%g;
    s%${SED}%sed%g;
    s%${STAT}%stat%g;

    s%wc -l | awk '{ print \$1 }'%wc -l%g;

    \%VmHWM:%d;

    s%[[:space:]]*\$%%g;
    "
}

run_sort() {
    echo "$" "$@"                             2>&1 | replace
    # shellcheck disable=SC2294
    eval "${GUFI_PYTHON_TEST_COVERAGE}" "$@"  2>&1 | replace | sort
    echo
}

run_no_sort() {
    echo "$" "$@"                             2>&1 | replace
    # shellcheck disable=SC2294
    eval "${GUFI_PYTHON_TEST_COVERAGE}" "$@"  2>&1 | replace
    echo
}

# somewhat force ordering of trace file
order_tracefile() {
    @GREP@ -a "^${SRCDIR}${DELIM}"              "$1"
    @GREP@ -a "^${SRCDIR}/.hidden${DELIM}"      "$1"
    @GREP@ -a "^${SRCDIR}/1KB${DELIM}"          "$1"
    @GREP@ -a "^${SRCDIR}/1MB${DELIM}"          "$1"
    @GREP@ -a "^${SRCDIR}/file_symlink${DELIM}" "$1"
    @GREP@ -a "^${SRCDIR}/old_file${DELIM}"     "$1"
    @GREP@ -a "^${SRCDIR}/repeat_name${DELIM}"  "$1"
    @GREP@ -a "^${SRCDIR}/directory.*${DELIM}"  "$1"
    @GREP@ -a "^${SRCDIR}/leaf.*${DELIM}"       "$1"
    @GREP@ -a "^${SRCDIR}/unusual.*${DELIM}"    "$1"
}

remove_indexing_time() {
    @GREP@ -v "Scouts took \|Time Spent Indexing:\|Dirs/Sec:\|Files/Sec\|Took "
}

partial_indexing_setup() {
    echo "# ######################################"
    echo "# partial indexing setup"
    run_no_sort "find \"${SRCDIR}\" -mindepth ${DISTRIBUTED_LEVEL} -maxdepth ${DISTRIBUTED_LEVEL} -type d | @SED@ \"s%${SRCDIR}/%%g;\" | sort > ${DISTRIBUTED_PREFIX}"
    line_count=$(wc -l < "${DISTRIBUTED_PREFIX}")
    half=$(( line_count / 2 ))
    run_no_sort "head -n ${half} \"${DISTRIBUTED_PREFIX}\" > \"${DISTRIBUTED_0}\""
    run_no_sort "tail -n +$(( half + 1 )) \"${DISTRIBUTED_PREFIX}\" > \"${DISTRIBUTED_1}\""
    echo "# ######################################"
    echo
}

pull_ug_summary_columns() {
    UG="$1"
    RELATION="$2"
    WHERE="$3"

    if [[ "${UG}" = "uid" ]]
    then
        SRC="${USER_ID}"
        DST="${TEST_USER_ID}"
    elif [[ "${UG}" = "gid" ]]
    then
        SRC="${GROUP_ID}"
        DST="${TEST_GROUP_ID}"
    fi

    # not getting mincrtime and maxcrtime
    run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT path(), level(), totfiles, totlinks, '[', ${UG}, minuid, maxuid, mingid, maxgid, ']', minsize, maxsize, totltk, totmtk, totltm, totmtm, totmtg, totmtt, totsize, minmtime, maxmtime, minatime, maxatime, totxattr, 0, 0, minossint1, maxossint1, totossint1, minossint2, maxossint2, totossint2, minossint3, maxossint3, totossint3, minossint4, maxossint4, totossint4, rectype FROM ${RELATION}${WHERE};\" \"${INDEXROOT}\"" | @SED@ "s%\[ ${SRC} ${USER_ID} ${USER_ID} ${GROUP_ID} ${GROUP_ID} \]%${DST} ${TEST_USER_ID} ${TEST_USER_ID} ${TEST_GROUP_ID} ${TEST_GROUP_ID}%g;"
}

# set some columns to make test easier
clean_index() {
    INDEX="$1"
    ACTUAL="$2"

    # update xattrs to point to updated inodes
    # do this before updating summary/entries to be able to use actual inodes
    "${GUFI_QUERY}" \
        -a 1 \
        -x \
        -w \
        -I "CREATE TABLE temp_xattrs (inode TEXT, name TEXT, value TEXT);" \
        -S "INSERT INTO temp_xattrs (inode, name, value) SELECT CAST(mtime AS TEXT), xattr_name, xattr_value FROM xsummary WHERE xattr_name IS NOT NULL UNION ALL SELECT CAST(mtime AS TEXT), xattr_name, xattr_value FROM xpentries WHERE xattr_name IS NOT NULL;" \
        -E "DELETE FROM xattrs_pwd; INSERT INTO xattrs_pwd SELECT * FROM temp_xattrs; DELETE from temp_xattrs;" \
        "${INDEX}"

    # update summary and entries columns
    "${GUFI_QUERY}" \
        -a 1 \
        -w \
        -S "UPDATE summary SET inode = CAST(mtime AS TEXT), size = mtime, atime = mtime, ctime = mtime;" \
        -E "UPDATE entries SET inode = CAST(mtime AS TEXT), size = mtime, atime = mtime, ctime = mtime;" \
        "${INDEX}"

    # set symlink permissions to 777 since they don't matter but are different depending on system
    "${GUFI_QUERY}" \
        -w \
        -E "UPDATE entries SET mode = mode | 511 WHERE type == 'l';" \
        "${INDEX}"

    "${GUFI_QUERY}" \
        -w \
        -S "UPDATE summary SET minatime = (SELECT MIN(mtime) FROM entries), maxatime = (SELECT MAX(mtime) FROM entries);" \
        "${INDEX}"

    # set parent pinodes
    "${SQLITE3}" "${INDEX}/db.db"                        "UPDATE summary SET pinode = '18';"
    "${SQLITE3}" "${INDEX}/directory/db.db"              "UPDATE summary SET pinode = '17';"
    "${SQLITE3}" "${INDEX}/directory/subdirectory/db.db" "UPDATE summary SET pinode = '7';"
    "${SQLITE3}" "${INDEX}/empty_directory/db.db"        "UPDATE summary SET pinode = '17';"
    "${SQLITE3}" "${INDEX}/leaf_directory/db.db"         "UPDATE summary SET pinode = '17';"
    "${SQLITE3}" "${INDEX}/unusual#? directory ,/db.db"  "UPDATE summary SET pinode = '17';"

    if [[ "${ACTUAL}" == "1" ]]
    then
        # directory/subdirectory and directory/subdirectory/repeat_name need their actual inodes
        DIR="$(@STAT@ -c '%i' ${SRCDIR}/directory/subdirectory)"
        FILE="$(@STAT@ -c '%i' ${SRCDIR}/directory/subdirectory/repeat_name)"
        "${SQLITE3}" "${INDEX}/directory/subdirectory/db.db" "UPDATE summary SET inode = '${DIR}' WHERE name == 'subdirectory';"
        "${SQLITE3}" "${INDEX}/directory/subdirectory/db.db" "UPDATE entries SET inode = '${FILE}' WHERE name == 'repeat_name';"
        "${SQLITE3}" "${INDEX}/directory/subdirectory/db.db" "UPDATE xattrs_pwd SET inode = '${DIR}' WHERE inode == '6';"
        "${SQLITE3}" "${INDEX}/directory/subdirectory/db.db" "UPDATE xattrs_pwd SET inode = '${FILE}' WHERE inode == '5';"
    fi
}

if [[ "${GENERATE_INDEX}" == "1" ]]
then
    # generate the tree
    "${GENERATETREE}" "${SRCDIR}"

    # generate the index
    "${GUFI_DIR2INDEX}" -x "${SRCDIR}" "${SEARCH}" > /dev/null

    clean_index "${INDEXROOT}" 1
fi

