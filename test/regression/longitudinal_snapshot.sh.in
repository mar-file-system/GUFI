#!/usr/bin/env bash
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



set -e
source @CMAKE_CURRENT_BINARY_DIR@/setup.sh "longitudinal_snapshot" 1

FLATDB="flattened_index.db"
SNAPSHOT="longitudinal_snapshot.db"

cleanup() {
    rm -f "${FLATDB}" "${SNAPSHOT}"
}

cleanup

tables=("metadata" "entries" "summary" "treesummary" "snapshot")

show_schema() {
    grouping="$1"

    # no need to delete FLATDB since this function is run before generating it

    (
        echo "# bad flat db path"
        run_no_sort "ln -s \"${INDEXROOT}\" \"${FLATDB}\""
        run_no_sort "${LONGITUDINAL_SNAPSHOT} ${grouping} \"${INDEXROOT}\" \"${FLATDB}\" \"${SNAPSHOT}\" --gufi_query=\"${GUFI_QUERY}\" 2>&1 | tail -n 2 | head -n 1"
        run_no_sort "rm \"${FLATDB}\""

        echo "# generate good flat db and snapshot db"
        run_no_sort "${LONGITUDINAL_SNAPSHOT} ${grouping} \"${INDEXROOT}\" \"${FLATDB}\" \"${SNAPSHOT}\" --gufi_query=\"${GUFI_QUERY}\" --notes 'test notes' --verbose"

        echo "# running without replacing snapshot db will error because the tables already exist"
        run_no_sort "${LONGITUDINAL_SNAPSHOT} ${grouping} \"${INDEXROOT}\" \"${FLATDB}\" \"${SNAPSHOT}\" --gufi_query=\"${GUFI_QUERY}\" --notes 'test notes'"

        echo "# running with snapshot db replacement will overwrite the previous data"
        run_no_sort "${LONGITUDINAL_SNAPSHOT} ${grouping} \"${INDEXROOT}\" \"${FLATDB}\" \"${SNAPSHOT}\" --gufi_query=\"${GUFI_QUERY}\" --notes 'test notes' --replace-outdb"
    ) | sed 's/time, [0-9]*)/time, now)/g'

    run_no_sort "${SQLITE3} \"${SNAPSHOT}\" \".tables\""

    for table in "${tables[@]}"
    do
        run_no_sort "${SQLITE3} \"${SNAPSHOT}\" \"PRAGMA TABLE_INFO(${table});\""
    done

    run_no_sort "${SQLITE3} \"${SNAPSHOT}\" \"SELECT notes FROM metadata;\""

    cleanup
}

get_view() {
    grouping="$1"

    rm -f "${SNAPSHOT}"

    if [[ -f "${FLATDB}" ]]
    then
        echo "# ${FLATDB} already exists"
    else
        echo "# ${FLATDB} does not exist"
    fi
    echo

    run_no_sort "${LONGITUDINAL_SNAPSHOT} ${grouping} \"${INDEXROOT}\" \"${FLATDB}\" \"${SNAPSHOT}\" --gufi_query=\"${GUFI_QUERY}\" --notes 'test notes'"

    for table in "${tables[@]}"
    do
        run_no_sort "${SQLITE3} \"${SNAPSHOT}\" \"SELECT COUNT(*) FROM ${table};\""
    done

    # graph does not have a corresponding column
    if [[ "${grouping}" == "graph" ]]
    then
        group_by="NULL"
    else
        group_by="CAST(${grouping} AS INT)"
    fi

    run_no_sort "${SQLITE3} \"${SNAPSHOT}\" \"SELECT ${group_by}, totsize, tsum_totsize, totdirs, totsubdirs, totfiles, tsum_totfiles, totlinks, tsum_totlinks FROM snapshot ORDER BY ${group_by} ASC;\""
}

do_test() {
    cleanup

    run_no_sort "${LONGITUDINAL_SNAPSHOT} --help" | replace_argparse

    show_schema "level"

    get_view "graph"
    get_view "level"
    get_view "pinode"                      # parent
    get_view "inode" | sed "s/${DIR}/6/g"  # directory

    echo "# ${FLATDB}:"
    echo
    run_no_sort "${SQLITE3} \"${FLATDB}\" \".tables\""
    run_no_sort "${SQLITE3} \"${FLATDB}\" \"SELECT COUNT(*) FROM entries;\""
    run_no_sort "${SQLITE3} \"${FLATDB}\" \"SELECT COUNT(*) FROM entries WHERE type == 'f';\""
    run_no_sort "${SQLITE3} \"${FLATDB}\" \"SELECT COUNT(*) FROM summary;\""
    run_no_sort "${SQLITE3} \"${FLATDB}\" \"SELECT COUNT(*) FROM treesummary;\""
}

(
"${GUFI_TREESUMMARY_ALL}" "${INDEXROOT}" >/dev/null 2>&1

do_test | tee "${TEST_OUTPUT}"
"${DIFF}" @CMAKE_CURRENT_BINARY_DIR@/longitudinal_snapshot.expected "${TEST_OUTPUT}"

# longitudinal snapshot does not work with rolled up indexes due to treesummaries not being copied
)

rm "${TEST_OUTPUT}"
cleanup
setup_cleanup
