#!/usr/bin/env bash
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



set -e
. @CMAKE_CURRENT_BINARY_DIR@/setup.sh 1

OUTPUT="gufi_distributed.out"

# shellcheck disable=SC2153
SEARCH2="${SEARCH}2"
INDEXROOT2="${SEARCH2}/${BASENAME}"

NODES=5 # for subtrees (4 actually used)

TRACES="traces"
OUTPUT_PREFIX="output"

LOCALHOST="localhost"
HOME_IP="127.0.0.1"
HOSTFILE="hostfile"

generate_hostfile() {
    (
        # for distributing tree
        echo "${LOCALHOST}"
        echo "${HOME_IP}"
        echo "${LOCALHOST}"
        echo "${HOME_IP}"
        echo "${LOCALHOST}" # not used
        echo                # empty lines are ignored
        # for processing top
        echo "${HOME_IP}"
    ) > "${HOSTFILE}"
}

# pre-create output file lists in parent scope to have them available for use

# names of files containing paths for "nodes" to process
PATH_LIST="path_list"
groups=()
for jobid in {0..4}
do
    groups+=("${PATH_LIST}.${jobid}")
done

# names of "slurm" output files
slurm_files=()
for jobid in {0..4}
do
    slurm_files+=("slurm.fake-${jobid}.out")
done

# names of "ssh" output files
ssh_files=()
for (( thread = 0; thread < THREADS; thread++ ))
do
    ssh_files+=(
        "${OUTPUT_PREFIX}.${LOCALHOST}.0.${thread}"
        "${OUTPUT_PREFIX}.${HOME_IP}.1.${thread}"
        "${OUTPUT_PREFIX}.${LOCALHOST}.2.${thread}"
        "${OUTPUT_PREFIX}.${HOME_IP}.3.${thread}"
        "${OUTPUT_PREFIX}.${HOME_IP}.top.${thread}"
    )
done

trace_files() {
    prefix="TRACES"
    list=()
    for (( thread = 0; thread < THREADS; thread++ ))
    do
        for (( rank = 0; rank < NODES; rank++ ))
        do
            name="${!prefix}.${rank}.${thread}"
            if [[ -f "${name}" ]]
            then
                list+=("${name}")
            fi
        done

        top="${!prefix}.${thread}"
        if [[ -f "${top}" ]]
        then
            list+=("${top}")
        fi
    done

    echo "${list[@]}"
}

remove_distributed_output() {
    remove_indexing_time | @GREP@ -v "Creating GUFI\|Total Dirs:\|Total Non-Dirs\|Total Files:\|find.sh returned\|Jobs completed in"
}

cleanup() {
    # shellcheck disable=SC2207
    traces=($(trace_files))
    rm -rf "${SEARCH2}" "${HOSTFILE}" "${PATH_LIST}" "${groups[@]}" "${slurm_files[@]}" "slurm.fake-5.out" "${ssh_files[@]}" "${traces[@]}"
}

cleanup_exit() {
    cleanup
    setup_cleanup
}

trap cleanup_exit EXIT

cleanup

run_no_sort "${GUFI_DIR2INDEX_DISTRIBUTED} --help"
run_no_sort "${GUFI_DIR2TRACE_DISTRIBUTED} --help"
run_no_sort "${GUFI_TREESUMMARY_ALL_DISTRIBUTED} --help"
run_no_sort "${GUFI_QUERY_DISTRIBUTED} --help"

(
echo "#####################################"
echo "# slurm jobs"
echo

generate_hostfile

echo "# Index Source Tree"
run_no_sort "${GUFI_DIR2INDEX_DISTRIBUTED} --sbatch \"${SBATCH_FAKE}\" --gufi_dir2index \"${GUFI_DIR2INDEX}\" \"${FIND_SH}\" slurm \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SEARCH2}\" 2>/dev/null"

rm -rf "${slurm_files[@]}"

echo "# Query Index"
run_no_sort "${GUFI_QUERY_DISTRIBUTED} --sbatch \"${SBATCH_FAKE}\" --gufi_query \"${GUFI_QUERY}\" --threads ${THREADS} --delim \"${DELIM}\" \"${FIND_SH}\" slurm \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" -S \"SELECT rpath(sname, sroll), mtime FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name, mtime FROM vrpentries;\""

echo "# combine output files"
# shellcheck disable=SC2145
run_sort "cat ${slurm_files[@]}" | @SED@ "s%${INDEXROOT2}%prefix2%g;"

echo "# Diff original index results against the combined results"
# shellcheck disable=SC2145,SC2153
run_no_sort "@DIFF@ <(\"${GUFI_QUERY}\" -d \"${DELIM}\" -S \"SELECT rpath(sname, sroll), mtime FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name, mtime FROM vrpentries;\" \"${INDEXROOT}\" | sort) <(cat ${slurm_files[@]} | sort | sed 's/${INDEXROOT2//\//\\/}/${INDEXROOT//\//\\/}/g')"

echo "# Diff original index results against querying the new index from a single node"
run_no_sort "@DIFF@ <(${GUFI_QUERY} -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT}\" | sort) <(${GUFI_QUERY} -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT2}\" | sort | sed 's/${INDEXROOT2//\//\\/}/${INDEXROOT//\//\\/}/g')"

rm -f "${slurm_files[@]}"

echo "# Convert source tree to trace files"
run_no_sort "${GUFI_DIR2TRACE_DISTRIBUTED} --sbatch \"${SBATCH_FAKE}\" --gufi_dir2trace \"${GUFI_DIR2TRACE}\" -d \"${DELIM}\" \"${FIND_SH}\" slurm \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${TRACES}\""

traces=("$(trace_files)")

echo "# Print contents of traces files"
# shellcheck disable=SC2145
run_sort "cat ${traces[@]} | @AWK@ -F'${DELIM}' '{ print \$1 }'"

echo "# Diff original index results against the trace files"
# shellcheck disable=SC2145,SC2153
run_no_sort "@DIFF@ <(${GUFI_QUERY} -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT}\" | sort | @SED@ 's%${SEARCH}/%%g;') <(cat ${traces[@]} | @AWK@ -F'${DELIM}' '{ print \$1 }' | sort)"

echo "# Use existing group files (path_list.4 does not exist)"
run_no_sort "${GUFI_DIR2INDEX_DISTRIBUTED} --sbatch \"${SBATCH_FAKE}\" --gufi_dir2index \"${GUFI_DIR2INDEX}\" --use-existing-group-files \"${FIND_SH}\" slurm \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SEARCH2}\" 2>/dev/null"

echo "# Generate treesummary tables"
run_no_sort "${GUFI_TREESUMMARY_ALL_DISTRIBUTED} --sbatch \"${SBATCH_FAKE}\" --gufi_treesummary_all \"${GUFI_TREESUMMARY_ALL}\" --use-existing-group-files \"${FIND_SH}\" slurm \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" 2>/dev/null"

echo "# Query the treesummary tables"
run_sort "${GUFI_QUERY} -n ${THREADS} -d \"${DELIM}\" -T \"SELECT path(), totsubdirs, totfiles FROM treesummary;\" \"${INDEXROOT2}\""

echo "# Roll up the index"
run_no_sort "${GUFI_ROLLUP_DISTRIBUTED} --sbatch \"${SBATCH_FAKE}\" --gufi_rollup \"${GUFI_ROLLUP}\" --use-existing-group-files \"${FIND_SH}\" slurm \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" 2>/dev/null"

echo "# Query the rolled up index"
run_sort "${GUFI_QUERY} -n ${THREADS} -d \"${DELIM}\" -T \"SELECT name, isroot, rollupscore FROM summary;\" \"${INDEXROOT2}\""

echo "# Unroll up the index"
run_no_sort "${GUFI_UNROLLUP_DISTRIBUTED} --sbatch \"${SBATCH_FAKE}\" --gufi_unrollup \"${GUFI_UNROLLUP}\" --use-existing-group-files \"${FIND_SH}\" slurm \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" 2>/dev/null"

echo "# Query the unrolled up index"
run_sort "${GUFI_QUERY} -n ${THREADS} -d \"${DELIM}\" -T \"SELECT name, isroot, rollupscore FROM summary;\" \"${INDEXROOT2}\""

cleanup
echo "#####################################"
echo
echo "#####################################"
echo "# ssh jobs"
echo

generate_hostfile

echo "# Index Source Tree"
run_no_sort "${GUFI_DIR2INDEX_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_dir2index \"${GUFI_DIR2INDEX}\" \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SEARCH2}\" 2>/dev/null"

echo "# Query Index"
run_no_sort "${GUFI_QUERY_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_query \"${GUFI_QUERY}\" --threads ${THREADS} --delim \"${DELIM}\" \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" -S \"SELECT rpath(sname, sroll), mtime FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name, mtime FROM vrpentries;\" --output_prefix \"output\""

echo "# combine output files"
# shellcheck disable=SC2145
run_sort "cat ${ssh_files[@]}" | @SED@ "s%${INDEXROOT2}%prefix2%g;"

echo "# Diff original index results against the combined results"
# shellcheck disable=SC2145,SC2153
run_no_sort "@DIFF@ <(\"${GUFI_QUERY}\" -d \"${DELIM}\" -S \"SELECT rpath(sname, sroll), mtime FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name, mtime FROM vrpentries;\" \"${INDEXROOT}\" | sort) <(cat ${ssh_files[@]} | sort | sed 's/${INDEXROOT2//\//\\/}/${INDEXROOT//\//\\/}/g')"

echo "# Diff original index results against querying the new index from a single node"
run_no_sort "@DIFF@ <(${GUFI_QUERY} -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT}\" | sort) <(${GUFI_QUERY} -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT2}\" | sort | sed 's/${INDEXROOT2//\//\\/}/${INDEXROOT//\//\\/}/g')"

echo "# Convert source tree to trace files"
run_no_sort "${GUFI_DIR2TRACE_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_dir2trace \"${GUFI_DIR2TRACE}\" -d \"${DELIM}\" \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${TRACES}\""

traces=("$(trace_files)")

echo "# Print contents of traces files"
# shellcheck disable=SC2145
run_sort "cat ${traces[@]} | @AWK@ -F'${DELIM}' '{ print \$1 }'"

echo "# Diff original index results against the trace files"
# shellcheck disable=SC2145,SC2153
run_no_sort "@DIFF@ <(${GUFI_QUERY} -d \"${DELIM}\" -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT}\" | sort | @SED@ 's%${SEARCH}/%%g;') <(cat ${traces[@]} | @AWK@ -F'${DELIM}' '{ print \$1 }' | sort)"

echo "# Use existing group files (path_list.4 does not exist)"
run_no_sort "${GUFI_DIR2INDEX_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_dir2index \"${GUFI_DIR2INDEX}\" --use-existing-group-files \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SEARCH2}\" 2>/dev/null | tail -n 9"

echo "# Generate treesummary tables"
run_no_sort "${GUFI_TREESUMMARY_ALL_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_treesummary_all \"${GUFI_TREESUMMARY_ALL}\" --use-existing-group-files \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" 2>/dev/null"

echo "# Query the treesummary tables"
run_sort "${GUFI_QUERY} -n ${THREADS} -d \"${DELIM}\" -T \"SELECT path(), totsubdirs, totfiles FROM treesummary;\" \"${INDEXROOT2}\""

echo "# Roll up the index"
run_no_sort "${GUFI_ROLLUP_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_rollup \"${GUFI_ROLLUP}\" --use-existing-group-files \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" 2>/dev/null | tail -n 9"

echo "# Query the rolled up index"
run_sort "${GUFI_QUERY} -n ${THREADS} -d \"${DELIM}\" -T \"SELECT name, isroot, rollupscore FROM summary;\" \"${INDEXROOT2}\""

echo "# Unroll up the index"
run_no_sort "${GUFI_UNROLLUP_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_unrollup \"${GUFI_UNROLLUP}\" --use-existing-group-files \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" 2>/dev/null"

echo "# Query the unrolled up index"
run_sort "${GUFI_QUERY} -n ${THREADS} -d \"${DELIM}\" -T \"SELECT name, isroot, rollupscore FROM summary;\" \"${INDEXROOT2}\""

rm -rf "${SEARCH}2"
echo "#####################################"
echo
echo "#####################################"
echo "# Index with an existing path list"

echo "# Generate path list"
run_no_sort "${FIND_SH} \"${SRCDIR}\" ${DISTRIBUTED_LEVEL} > \"${PATH_LIST}\""

echo "# Index Source Tree"
run_no_sort "${GUFI_DIR2INDEX_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_dir2index \"${GUFI_DIR2INDEX}\" --use-existing-paths \"${PATH_LIST}\" \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SEARCH2}\" 2>/dev/null"

echo "# Query Index"
run_no_sort "${GUFI_QUERY_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_query \"${GUFI_QUERY}\" --threads ${THREADS} --delim \"${DELIM}\" \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" -S \"SELECT rpath(sname, sroll), mtime FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name, mtime FROM vrpentries;\" --output_prefix \"output\""

echo "# combine output files"
# shellcheck disable=SC2145
run_sort "cat ${ssh_files[@]}" | @SED@ "s%${INDEXROOT2}%prefix2%g;"

echo "# Diff original index results against the combined results"
# shellcheck disable=SC2145,SC2153
run_no_sort "@DIFF@ <(\"${GUFI_QUERY}\" -d \"${DELIM}\" -S \"SELECT rpath(sname, sroll), mtime FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name, mtime FROM vrpentries;\" \"${INDEXROOT}\" | sort) <(cat ${ssh_files[@]} | sort | sed 's/${INDEXROOT2//\//\\/}/${INDEXROOT//\//\\/}/g')"

echo "# Diff original index results against querying the new index from a single node"
run_no_sort "@DIFF@ <(${GUFI_QUERY} -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT}\" | sort) <(${GUFI_QUERY} -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT2}\" | sort | sed 's/${INDEXROOT2//\//\\/}/${INDEXROOT//\//\\/}/g')"
echo "#####################################"
echo
echo "#####################################"
echo "# Errors"

echo "# Bad source path"
run_no_sort "${GUFI_DIR2INDEX_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_dir2index \"${GUFI_DIR2INDEX}\" --use-existing-group-files \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${HOSTFILE}\" \"${SEARCH2}\" 2>&1 | tail -n 1"

echo "# Missing argument to gufi_query_distributed"
run_no_sort "${GUFI_QUERY_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_query \"${GUFI_QUERY}\" --threads ${THREADS} --delim \"${DELIM}\" \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" -S \"SELECT rpath(sname, sroll), mtime FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name, mtime FROM vrpentries;\" 2>&1 | tail -n 1"

echo "# Bad executable"
run_no_sort "${GUFI_QUERY_DISTRIBUTED} --ssh \"${SSH_FAKE}\" --gufi_query \"${HOSTFILE}\" --threads ${THREADS} --delim \"${DELIM}\" \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" -S \"SELECT rpath(sname, sroll), mtime FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name, mtime FROM vrpentries;\" 2>&1 | tail -n 1"

(
    echo
    echo
) > "${HOSTFILE}"

echo "# Bad hostfile"
run_no_sort "${GUFI_QUERY_DISTRIBUTED} \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${INDEXROOT2}\" 2>&1 | tail -n 1"

generate_hostfile

echo "# Cannot use existing path list and group files at the same time "
run_no_sort "${GUFI_DIR2INDEX_DISTRIBUTED} --use-existing-paths \"${PATH_LIST}\" --use-existing-group-files \"${FIND_SH}\" ssh \"${HOSTFILE}\" ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SEARCH2}\" 2>&1 | tail -n 1"

echo "#####################################"
) 2>&1 | remove_distributed_output | tee "${OUTPUT}"

@DIFF@ @CMAKE_CURRENT_BINARY_DIR@/gufi_distributed.expected "${OUTPUT}"
rm "${OUTPUT}"
