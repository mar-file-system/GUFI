#!/usr/bin/env bash
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



set -e
source @CMAKE_CURRENT_BINARY_DIR@/setup.sh "external_databases" 0

EXTERNAL_GUFI="external.gufi"

# common table name
TABLE="user_table"

# faction1 joins on name
FACTION1_DB="faction1.db"
FACTION1_CREATE_TABLE="CREATE TABLE ${TABLE}(name TEXT, type TEXT, data TEXT);"
FACTION1_TEMPLATE_DB="template.faction1"
FACTION1_TEMPLATE_ATTACH="faction1_empty"
FACTION1_VIEW="faction1_view"

# faction2 joins on type
FACTION2_DB="faction2.db"
FACTION2_CREATE_TABLE="CREATE TABLE ${TABLE}(name TEXT, type TEXT, data TEXT);"
FACTION2_TEMPLATE_DB="template.faction2"
FACTION2_TEMPLATE_ATTACH="faction2_empty"
FACTION2_VIEW="faction2_view"

cleanup() {
    rm -rf "${FACTION1_TEMPLATE_DB}" "${FACTION2_TEMPLATE_DB}"
}

cleanup

setup() {
    cleanup

    run_no_sort "${GENERATETREE} \"${SRCDIR}\""

    echo "# create empty template for providing default data"
    run_no_sort "${SQLITE3} \"${TEST_DIR}/${FACTION1_TEMPLATE_DB}\" \"${FACTION1_CREATE_TABLE}\""

    echo "# create empty template for providing default data"
    run_no_sort "${SQLITE3} \"${TEST_DIR}/${FACTION2_TEMPLATE_DB}\" \"${FACTION2_CREATE_TABLE}\""

    echo "# create in-source-tree user db files and fill in tables"
    echo

    # ${SRCDIR} has both faction1 and faction2 files
    (
        echo "${FACTION1_DB}"
        echo "${FACTION2_DB}"
    ) > "${SRCDIR}/${EXTERNAL_GUFI}"
    # ${SRCDIR}/directory has matches for the directory and a file
    (
        echo "${FACTION1_DB}"
    ) > "${SRCDIR}/directory/${EXTERNAL_GUFI}"
    # ${SRCDIR}/directory/subdirectory has matches for the directory and a file
    (
        echo "${FACTION2_DB}"
    ) > "${SRCDIR}/directory/subdirectory/${EXTERNAL_GUFI}"
    # ${SRCDIR}/leaf_directory has a faction1 db, but no matches (maybe a file was deleted from the index)
    (
        echo "${FACTION1_DB}"
    ) > "${SRCDIR}/leaf_directory/${EXTERNAL_GUFI}"

    echo "#########################################"
    run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION1_DB}\" \"${FACTION1_CREATE_TABLE}\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('${BASENAME}', 'd', 'faction1 root directory');\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('old_file', 'f', 'faction1 old file data');\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('1MB', 'f', 'faction1 1MB file');\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('repeat_name', 'f', 'faction1 repeat_name');\""
    echo "#########################################"
    run_no_sort "${SQLITE3} \"${SRCDIR}/directory/${FACTION1_DB}\" \"${FACTION1_CREATE_TABLE}\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/directory/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('directory', 'd', 'faction1 directory');\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/directory/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('executable', 'f', 'faction1 executable file');\""
    echo "#########################################"
    run_no_sort "${SQLITE3} \"${SRCDIR}/leaf_directory/${FACTION1_DB}\" \"${FACTION1_CREATE_TABLE}\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/leaf_directory/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('no match', 'f', 'this should not show up in the index');\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/leaf_directory/${FACTION1_DB}\" \"INSERT INTO ${TABLE} VALUES ('leaf_file1', 'f', 'faction1 leaf file 1');\""
    echo "#########################################"
    echo
    echo "#########################################"
    run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION2_DB}\" \"${FACTION2_CREATE_TABLE}\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION2_DB}\" \"INSERT INTO ${TABLE} VALUES ('${BASENAME}', 'd', 'faction2 root directory');\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/${FACTION2_DB}\" \"INSERT INTO ${TABLE} VALUES ('1KB', 'f', 'faction2 1KB file');\""
    echo "#########################################"
    run_no_sort "${SQLITE3} \"${SRCDIR}/directory/subdirectory/${FACTION2_DB}\" \"${FACTION2_CREATE_TABLE}\""
    run_no_sort "${SQLITE3} \"${SRCDIR}/directory/subdirectory/${FACTION2_DB}\" \"INSERT INTO ${TABLE} VALUES ('subdirectory', 'd', 'faction2 subdirectory');\""
    echo "#########################################"
    echo

    run_sort "find \"${SRCDIR}\""
}

direct_index() {
    # generate index directly from source tree
    "${GUFI_DIR2INDEX}" -q -x "${SRCDIR}" "${SEARCH}"
}

indirect_index() {
    # test with index generate with trace files
    "${GUFI_DIR2TRACE}"   -d "${DELIM}" -q -x "${SRCDIR}"  "${TRACE}"
    "${GUFI_TRACE2INDEX}" -d "${DELIM}"       "${TRACE}.0" "${SEARCH}"
}

fix_index() {
    # fix timestamps
    "${SQLITE3}" "${INDEXROOT}/db.db"                        "UPDATE summary SET mtime = '17';"
    "${SQLITE3}" "${INDEXROOT}/directory/db.db"              "UPDATE summary SET mtime = '7';"
    "${SQLITE3}" "${INDEXROOT}/directory/subdirectory/db.db" "UPDATE summary SET mtime = '6';"
    "${SQLITE3}" "${INDEXROOT}/leaf_directory/db.db"         "UPDATE summary SET mtime = '13';"

    clean_index "${INDEXROOT}" 0

    # fix pinode in external_dbs
    run_sort "${SQLITE3} \"${INDEXROOT}/db.db\"                        \"UPDATE external_dbs_pwd SET pinode = '17'\""
    run_sort "${SQLITE3} \"${INDEXROOT}/directory/db.db\"              \"UPDATE external_dbs_pwd SET pinode = '7'\""
    run_sort "${SQLITE3} \"${INDEXROOT}/directory/subdirectory/db.db\" \"UPDATE external_dbs_pwd SET pinode = '6'\""
    run_sort "${SQLITE3} \"${INDEXROOT}/leaf_directory/db.db\"         \"UPDATE external_dbs_pwd SET pinode = '13'\""

    # output from these point to the source tree, not the index
    # (output was mangled with test text cleanup)
    SELECT_EXTERNAL_DBS="SELECT pinode, filename FROM external_dbs;"
    run_sort "${SQLITE3} \"${INDEXROOT}/db.db\"                        \"${SELECT_EXTERNAL_DBS}\""
    run_sort "${SQLITE3} \"${INDEXROOT}/directory/db.db\"              \"${SELECT_EXTERNAL_DBS}\""
    run_sort "${SQLITE3} \"${INDEXROOT}/directory/subdirectory/db.db\" \"${SELECT_EXTERNAL_DBS}\""
    run_sort "${SQLITE3} \"${INDEXROOT}/leaf_directory/db.db\"         \"${SELECT_EXTERNAL_DBS}\""

    echo "# insert an external db that should not show up in queries"
    run_no_sort "${SQLITE3} \"${INDEXROOT}/leaf_directory/db.db\" \"INSERT INTO external_dbs_pwd (type, filename) VALUES ('user_db', 'this should not show up when querying');\""
}

do_tests() {
    echo "# get faction1 user data"
    echo "# SELECT rpath(), type, faction1 user data"
    run_sort "${GUFI_QUERY}" \
             "-d '|'" \
             "-I \"ATTACH '${TEST_DIR}/${FACTION1_TEMPLATE_DB}' AS '${FACTION1_TEMPLATE_ATTACH}';\"" \
             "-Q \"${FACTION1_DB}\" \"${TABLE}\" \"${FACTION1_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION1_VIEW}\"" \
             "-S \"SELECT rpath(evrsummary.sname, evrsummary.sroll), evrsummary.type, ${FACTION1_VIEW}.data FROM evrsummary LEFT JOIN ${FACTION1_VIEW} ON (evrsummary.name == ${FACTION1_VIEW}.name) AND (evrsummary.type == ${FACTION1_VIEW}.type);\"" \
             "-E \"SELECT rpath(evrpentries.sname, evrpentries.sroll) || '/' || evrpentries.name, evrpentries.type, ${FACTION1_VIEW}.data FROM evrpentries LEFT JOIN ${FACTION1_VIEW} ON (evrpentries.name == ${FACTION1_VIEW}.name) AND (evrpentries.type == ${FACTION1_VIEW}.type);\"" \
             "\"${SEARCH}\""

    echo "# again, but with xattrs"
    echo "# SELECT rpath(), type, xattr_name, xattr_value, faction1 user data"
    run_sort "${GUFI_QUERY}" \
             "-x" \
             "-d '|'" \
             "-I \"ATTACH '${TEST_DIR}/${FACTION1_TEMPLATE_DB}' AS '${FACTION1_TEMPLATE_ATTACH}';\"" \
             "-Q \"${FACTION1_DB}\" \"${TABLE}\" \"${FACTION1_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION1_VIEW}\"" \
             "-S \"SELECT rpath(evrxsummary.sname, evrxsummary.sroll), evrxsummary.type, evrxsummary.xattr_name, evrxsummary.xattr_value, ${FACTION1_VIEW}.data FROM evrxsummary LEFT JOIN ${FACTION1_VIEW} ON (evrxsummary.name == ${FACTION1_VIEW}.name) AND (evrxsummary.type == ${FACTION1_VIEW}.type);\"" \
             "-E \"SELECT rpath(evrxpentries.sname, evrxpentries.sroll) || '/' || evrxpentries.name, evrxpentries.type, evrxpentries.xattr_name, evrxpentries.xattr_value, ${FACTION1_VIEW}.data FROM evrxpentries LEFT JOIN ${FACTION1_VIEW} ON (evrxpentries.name == ${FACTION1_VIEW}.name) AND (evrxpentries.type == ${FACTION1_VIEW}.type);\"" \
             "\"${SEARCH}\""

    echo "# get faction2 user data"
    echo "# SELECT rpath(), type, faction2 user data"
    run_sort "${GUFI_QUERY}" \
             "-d '|'" \
             "-I \"ATTACH '${TEST_DIR}/${FACTION2_TEMPLATE_DB}' AS '${FACTION2_TEMPLATE_ATTACH}';\"" \
             "-Q \"${FACTION2_DB}\" \"${TABLE}\" \"${FACTION2_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION2_VIEW}\"" \
             "-S \"SELECT rpath(evrsummary.sname, evrsummary.sroll), evrsummary.type, ${FACTION2_VIEW}.data FROM evrsummary LEFT JOIN ${FACTION2_VIEW} ON (evrsummary.name == ${FACTION2_VIEW}.name) AND (evrsummary.type == ${FACTION2_VIEW}.type);\"" \
             "-E \"SELECT rpath(evrpentries.sname, evrpentries.sroll) || '/' || evrpentries.name, evrpentries.type, ${FACTION2_VIEW}.data FROM evrpentries LEFT JOIN ${FACTION2_VIEW} ON (evrpentries.name == ${FACTION2_VIEW}.name) AND (evrpentries.type == ${FACTION2_VIEW}.type);\"" \
             "\"${SEARCH}\""

    echo "# again, but with xattrs"
    echo "# SELECT rpath(), type, xattr_name, xattr_value, faction2 user data"
    run_sort "${GUFI_QUERY}" \
             "-x" \
             "-d '|'" \
             "-I \"ATTACH '${TEST_DIR}/${FACTION2_TEMPLATE_DB}' AS '${FACTION2_TEMPLATE_ATTACH}';\"" \
             "-Q \"${FACTION2_DB}\" \"${TABLE}\" \"${FACTION2_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION2_VIEW}\"" \
             "-S \"SELECT rpath(evrxsummary.sname, evrxsummary.sroll), evrxsummary.type, evrxsummary.xattr_name, evrxsummary.xattr_value, ${FACTION2_VIEW}.data FROM evrxsummary LEFT JOIN ${FACTION2_VIEW} ON (evrxsummary.name == ${FACTION2_VIEW}.name) AND (evrxsummary.type == ${FACTION2_VIEW}.type);\"" \
             "-E \"SELECT rpath(evrxpentries.sname, evrxpentries.sroll) || '/' || evrxpentries.name, evrxpentries.type, evrxpentries.xattr_name, evrxpentries.xattr_value, ${FACTION2_VIEW}.data FROM evrxpentries LEFT JOIN ${FACTION2_VIEW} ON (evrxpentries.name == ${FACTION2_VIEW}.name) AND (evrxpentries.type == ${FACTION2_VIEW}.type);\"" \
             "\"${SEARCH}\""

    echo "# get faction1 and faction2 user data at the same time"
    echo "# SELECT rpath(), type, faction1 user data, faction2 user data"
    run_sort "${GUFI_QUERY}" \
             "-d '|'" \
             "-I \"ATTACH '${TEST_DIR}/${FACTION1_TEMPLATE_DB}' AS '${FACTION1_TEMPLATE_ATTACH}'; ATTACH '${TEST_DIR}/${FACTION2_TEMPLATE_DB}' AS '${FACTION2_TEMPLATE_ATTACH}';\"" \
             "-Q \"${FACTION1_DB}\" \"${TABLE}\" \"${FACTION1_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION1_VIEW}\" -Q \"${FACTION2_DB}\" \"${TABLE}\" \"${FACTION2_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION2_VIEW}\"" \
             "-S \"SELECT rpath(evrsummary.sname, evrsummary.sroll), evrsummary.type, ${FACTION1_VIEW}.data, ${FACTION2_VIEW}.data FROM evrsummary LEFT JOIN ${FACTION1_VIEW} ON (evrsummary.name == ${FACTION1_VIEW}.name) AND (evrsummary.type == ${FACTION1_VIEW}.type) LEFT JOIN ${FACTION2_VIEW} ON (evrsummary.name == ${FACTION2_VIEW}.name) AND (evrsummary.type == ${FACTION2_VIEW}.type);\"" \
             "-E \"SELECT rpath(evrpentries.sname, evrpentries.sroll) || '/' || evrpentries.name, evrpentries.type, ${FACTION1_VIEW}.data, ${FACTION2_VIEW}.data FROM evrpentries LEFT JOIN ${FACTION1_VIEW} ON (evrpentries.name == ${FACTION1_VIEW}.name) AND (evrpentries.type == ${FACTION1_VIEW}.type) LEFT JOIN ${FACTION2_VIEW} ON (evrpentries.name == ${FACTION2_VIEW}.name) AND (evrpentries.type == ${FACTION2_VIEW}.type);\"" \
             "\"${SEARCH}\""

    echo "# again, but with xattrs"
    echo "# SELECT rpath(), type, xattr_name, xattr_value, faction1 user data, faction2 user data"
    run_sort "${GUFI_QUERY}" \
             "-x" \
             "-d '|'" \
             "-I \"ATTACH '${TEST_DIR}/${FACTION1_TEMPLATE_DB}' AS '${FACTION1_TEMPLATE_ATTACH}'; ATTACH '${TEST_DIR}/${FACTION2_TEMPLATE_DB}' AS '${FACTION2_TEMPLATE_ATTACH}';\" -Q \"${FACTION1_DB}\" \"${TABLE}\" \"${FACTION1_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION1_VIEW}\" -Q \"${FACTION2_DB}\" \"${TABLE}\" \"${FACTION2_TEMPLATE_ATTACH}.${TABLE}\" \"${FACTION2_VIEW}\"" \
             "-S \"SELECT rpath(evrxsummary.sname, evrxsummary.sroll), evrxsummary.type, evrxsummary.xattr_name, evrxsummary.xattr_value, ${FACTION1_VIEW}.data, ${FACTION2_VIEW}.data FROM evrxsummary LEFT JOIN ${FACTION1_VIEW} ON (evrxsummary.name == ${FACTION1_VIEW}.name) AND (evrxsummary.type == ${FACTION1_VIEW}.type) LEFT JOIN ${FACTION2_VIEW} ON (evrxsummary.name == ${FACTION2_VIEW}.name) AND (evrxsummary.type == ${FACTION2_VIEW}.type);\"" \
             "-E \"SELECT rpath(evrxpentries.sname, evrxpentries.sroll) || '/' || evrxpentries.name, evrxpentries.type, evrxpentries.xattr_name, evrxpentries.xattr_value,  ${FACTION1_VIEW}.data, ${FACTION2_VIEW}.data FROM evrxpentries LEFT JOIN ${FACTION1_VIEW} ON (evrxpentries.name == ${FACTION1_VIEW}.name) AND (evrxpentries.type == ${FACTION1_VIEW}.type) LEFT JOIN ${FACTION2_VIEW} ON (evrxpentries.name == ${FACTION2_VIEW}.name) AND (evrxpentries.type == ${FACTION2_VIEW}.type);\"" \
             "\"${SEARCH}\""
}

rollup() {
    run_no_sort "${GUFI_ROLLUP} \"${INDEXROOT}\"" | sed '/Started/d; /Took /d;'

    run_sort "${SQLITE3} \"${INDEXROOT}/db.db\" \"SELECT * FROM external_dbs;\""
    run_sort "${SQLITE3} \"${INDEXROOT}/db.db\" \"SELECT * FROM external_dbs_pwd;\""
    run_sort "${SQLITE3} \"${INDEXROOT}/db.db\" \"SELECT * FROM external_dbs_rollup;\""
}

(
    setup
    direct_index 2>&1 >/dev/null; echo "# Create Index"
    fix_index
    do_tests
    rollup
    do_tests
) 2>&1 | tee "${TEST_OUTPUT}"
"${DIFF}" @CMAKE_CURRENT_BINARY_DIR@/external_databases.expected "${TEST_OUTPUT}"
rm "${TEST_OUTPUT}"

(
    setup "indirect"
    indirect_index 2>&1 >/dev/null; echo "# Create Index"
    fix_index
    do_tests
    rollup
    do_tests
) 2>&1 | tee "${TEST_OUTPUT}"

"${DIFF}" @CMAKE_CURRENT_BINARY_DIR@/external_databases.expected "${TEST_OUTPUT}"
rm "${TEST_OUTPUT}"
cleanup
setup_cleanup
