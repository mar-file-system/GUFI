#!/usr/bin/env bash
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



set -e
. @CMAKE_CURRENT_BINARY_DIR@/setup.sh 1

OUTPUT="gufi_dir2index.out"

(
echo "# ${GUFI_DIR2INDEX} help" | replace
run_no_sort "${GUFI_DIR2INDEX}"

# index everything

# remove preexisting indicies
rm -rf "${SEARCH}"

# generate the index
# shellcheck disable=SC2016
out=$("${GUFI_DIR2INDEX}" -x "${SRCDIR}" "${SEARCH}" 2>&1 | @AWK@ '{ print "    " $0 }')

src=$(find "${SRCDIR}" | sort)

fullindex=$("${GUFI_QUERY}" -d " " -S "SELECT rpath(sname, sroll) FROM vrsummary;" -E "SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;" "${INDEXROOT}" | sort)

echo "Index Everything:"
echo
echo "${out}"
echo
paste \
    <(echo "    Source Directory:"
      # shellcheck disable=SC2016
      echo "${src}" | @AWK@ '{ printf "        " $0 "\n" }'
     ) \
    <(echo "    GUFI Tree:"
      # shellcheck disable=SC2016
      echo "${fullindex}" | @AWK@ '{ printf "        " $0 "\n" }'
     ) | @COLUMN@ -t -s$'\t'
echo

# index starting at different levels of the tree
for level in 0 1 2 3
do
    # remove preexisting indicies
    rm -rf "${SEARCH}"

    # generate the index
    # shellcheck disable=SC2016
    out=$("${GUFI_DIR2INDEX}" --min-level ${level} -x "${SRCDIR}" "${SEARCH}" 2>&1 | @AWK@ '{ print "    " $0 }')

    # find and GUFI levels are slightly different
    src=$( (find "${SRCDIR}" -mindepth ${level} -type d; find "${SRCDIR}" -mindepth $((level + 1)) ! -type d) | sort)

    index=$("${GUFI_QUERY}" -d " " -S "SELECT rpath(sname, sroll) FROM vrsummary;" -E "SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;" "${INDEXROOT}" | sort)

    echo "Index starting at level ${level}:"
    echo
    echo "${out}"
    echo
    paste \
        <(echo "    Source Directory:"
          # shellcheck disable=SC2016
          echo "${src}" | @AWK@ '{ printf "        " $0 "\n" }'
         ) \
        <(echo "    GUFI Tree:"
          # shellcheck disable=SC2016
          echo "${index}" | @AWK@ '{ printf "        " $0 "\n" }'
         ) | @COLUMN@ -t -s$'\t'
    echo
done

# index up to different levels of the tree
for level in 0 1 2 3
do
    # remove preexisting indicies
    rm -rf "${SEARCH}"

    # generate the index
    # shellcheck disable=SC2016
    out=$("${GUFI_DIR2INDEX}" --max-level ${level} -x "${SRCDIR}" "${SEARCH}" 2>&1 | @AWK@ '{ print "    " $0 }')

    src=$( (find "${SRCDIR}" -maxdepth ${level} -type d; find "${SRCDIR}" -maxdepth $((level + 1)) ! -type d) | sort)
    # src=$(find "${SRCDIR}" -maxdepth ${level} | sort)

    index=$("${GUFI_QUERY}" -d " " -S "SELECT rpath(sname, sroll) FROM vrsummary;" -E "SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;" "${INDEXROOT}" | sort)

    echo "Index up to level ${level}:"
    echo
    echo "${out}"
    echo
    paste \
        <(echo "    Source Directory:"
          # shellcheck disable=SC2016
          echo "${src}" | @AWK@ '{ printf "        " $0 "\n" }'
         ) \
        <(echo "    GUFI Tree:"
          # shellcheck disable=SC2016
          echo "${index}" | @AWK@ '{ printf "        " $0 "\n" }'
         ) | @COLUMN@ -t -s$'\t'
    echo
done

echo "# build index in pieces"
rm -r "${SEARCH}"
run_no_sort "${GUFI_DIR2INDEX} --min-level 2               -x ${SRCDIR} ${SEARCH}"
run_no_sort "${GUFI_DIR2INDEX} --min-level 1 --max-level 2 -x ${SRCDIR} ${SEARCH}"
run_no_sort "${GUFI_DIR2INDEX} --min-level 0 --max-level 1 -x ${SRCDIR} ${SEARCH}"
index=$("${GUFI_QUERY}" -d " " -S "SELECT rpath(sname, sroll) FROM vrsummary;" -E "SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;" "${INDEXROOT}" | sort)

paste \
    <(echo "Expected Index:"
      # shellcheck disable=SC2016
      echo "${fullindex}" | @AWK@ '{ printf "    " $0 "\n" }'
     ) \
    <( echo "Combined Index:"
      # shellcheck disable=SC2016
      echo "${index}" | @AWK@ '{ printf "    " $0 "\n" }'
     ) | @COLUMN@ -t -s$'\t' | @SED@ '1s%       Combined%Combined%g;' # first line is indented otoo far for some reason
echo

partial_indexing_setup

echo "# ######################################"
echo "# partial indexing (first half)"
run_no_sort "rm -r \"${SEARCH}\""
run_no_sort "cat \"${DISTRIBUTED_0}\""
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} -D \"${DISTRIBUTED_0}\" --min-level ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SEARCH}\""
run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT}\""
echo "# ######################################"
echo
echo "# ######################################"
echo "# partial indexing (second half)"
run_no_sort "rm -r \"${SEARCH}\""
run_no_sort "cat \"${DISTRIBUTED_1}\""
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} -D \"${DISTRIBUTED_1}\" --min-level ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SEARCH}\""
run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT}\""
echo "# ######################################"
echo
echo "# ######################################"
echo "# combine partial indexing"
run_no_sort "rm -r \"${SEARCH}\""
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} -D \"${DISTRIBUTED_0}\" --min-level ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SEARCH}\""
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} -D \"${DISTRIBUTED_1}\" --min-level ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SEARCH}\""
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} --max-level 0 \"${SRCDIR}\" \"${SEARCH}\""
run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT}\""
echo "# ######################################"
echo

rm -r "${SEARCH}"

echo "# target is file"
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} \"${SRCDIR}\" \"${SRCDIR}/1KB\""

echo "# source path is file"
# shellcheck disable=SC2046,SC2086
PARENT="$(dirname $(realpath ${SRCDIR}))"
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} \"${SRCDIR}/1KB\" \"${SEARCH}\"" | @SED@ "s%${PARENT}/%%g;"

echo "# empty source path"
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} \"\" \"${TRACE}\""

echo "# skip file"
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} --skip-file \"${SKIP}\" \"${SRCDIR}\" \"${SEARCH}\""

run_sort "${GUFI_QUERY} -d \" \" -S \"SELECT rpath(sname, sroll) FROM vrsummary;\" -E \"SELECT rpath(sname, sroll) || '/' || name FROM vrpentries;\" \"${INDEXROOT}\""

echo "# bad skip file"
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} --skip-file \"${SKIP}.bad\" \"${SRCDIR}\" \"${SEARCH}\""

echo "# bad thread count"
run_no_sort "${GUFI_DIR2INDEX} -n 18446744073709551615 \"${SRCDIR}\" \"${SEARCH}\""

echo "# multiple input directories are not allowed for partial indexing"
run_no_sort "${GUFI_DIR2INDEX} -n ${THREADS} -D \"${DISTRIBUTED_1}\" --min-level ${DISTRIBUTED_LEVEL} \"${SRCDIR}\" \"${SRCDIR}\" \"${SEARCH}\""
) | remove_indexing_time | replace | tee "${OUTPUT}"

@DIFF@ @CMAKE_CURRENT_BINARY_DIR@/gufi_dir2index.expected "${OUTPUT}"
rm "${OUTPUT}"
