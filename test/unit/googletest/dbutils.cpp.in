/*
This file is part of GUFI, which is part of MarFS, which is released
under the BSD license.


Copyright (c) 2017, Los Alamos National Security (LANS), LLC
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


From Los Alamos National Security, LLC:
LA-CC-15-039

Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
Copyright 2017. Los Alamos National Security, LLC. This software was produced
under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
the U.S. Department of Energy. The U.S. Government has rights to use,
reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
modified to produce derivative works, such modified software should be
clearly marked, so as not to confuse it with the version available from
LANL.

THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
OF SUCH DAMAGE.
*/



#include <cstdlib>
#include <ctime>
#include <grp.h>
#include <pwd.h>
#include <sys/resource.h>
#include <sys/types.h>
#include <unistd.h>

#include <gtest/gtest.h>

#include "dbutils.h"

TEST(attachdb, nullptr) {
    EXPECT_EQ(attachdb("filename", nullptr, "attach name", SQLITE_OPEN_READONLY, 0), nullptr);
    EXPECT_EQ(attachdb("filename", nullptr, "attach name", SQLITE_OPEN_READONLY, 1), nullptr);
}

TEST(detachdb, nullptr) {
    EXPECT_EQ(detachdb("filename", nullptr, "attach name", 0), nullptr);
    EXPECT_EQ(detachdb("filename", nullptr, "attach name", 1), nullptr);
}

TEST(create_table_wrapper, nullptr) {
    EXPECT_NE(create_table_wrapper(nullptr, nullptr, nullptr, nullptr), SQLITE_OK);
}

TEST(create_treesummary_tables, nullptr) {
    EXPECT_EQ(create_treesummary_tables(nullptr, nullptr, nullptr), 1);
}

TEST(set_db_pragmas, good) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open_v2(SQLITE_MEMORY, &db, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_URI, nullptr), SQLITE_OK);
    EXPECT_EQ(set_db_pragmas(db), 0);
    EXPECT_EQ(sqlite3_close(db), SQLITE_OK);
}

TEST(set_db_pragmas, nullptr) {
    EXPECT_EQ(set_db_pragmas(nullptr), 1);
}

TEST(opendb, bad_path) {
    {
        sqlite3 *db = opendb("@CMAKE_CURRENT_BINARY_DIR@", SQLITE_OPEN_READWRITE, 0, 0,
                             [](const char *, sqlite3 *, void *){ return 1; }, nullptr);
        EXPECT_EQ(db, nullptr);
    }

    {
        sqlite3 *db = opendb("@CMAKE_CURRENT_BINARY_DIR@", SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE, 0, 0,
                             [](const char *, sqlite3 *, void *){ return 1; }, nullptr);
        EXPECT_EQ(db, nullptr);
    }
}

TEST(opendb, modify_readonly_db) {
    sqlite3 *db = opendb(SQLITE_MEMORY, SQLITE_OPEN_READONLY, 0, 0,
                         [](const char *, sqlite3 *, void *){ return 0; }, nullptr);
    EXPECT_EQ(db, nullptr);
}

TEST(opendb, bad_modify_db) {
    sqlite3 *db = opendb(SQLITE_MEMORY, SQLITE_OPEN_READWRITE, 0, 0,
                         [](const char *, sqlite3 *, void *){ return 1; }, nullptr);
    EXPECT_EQ(db, nullptr);
}

TEST(querytsdb, nullptr) {
    EXPECT_EQ(querytsdb(nullptr, nullptr, nullptr, 0), 1);
    EXPECT_EQ(querytsdb(nullptr, nullptr, nullptr, 1), 1);
}

TEST(startdb, nullptr) {
    EXPECT_EQ(startdb(nullptr), 1);
}

TEST(stopdb, nullptr) {
    EXPECT_EQ(stopdb(nullptr), 1);
}

TEST(insertdbprep, nullptr) {
    EXPECT_EQ(insertdbprep(nullptr, nullptr), nullptr);
}

TEST(insertdbgo, nullptr) {
    struct work work = {};
    struct entry_data ed = {};

    EXPECT_EQ(insertdbgo(&work, &ed, nullptr), 1);
}

TEST(insertdbgo_xattrs_avail, nullptr) {
    struct entry_data ed = {};
    EXPECT_NE(insertdbgo_xattrs_avail(nullptr, &ed, nullptr), SQLITE_OK);

    ed.xattrs.count = 1;
    struct xattr xattr;
    ed.xattrs.pairs = &xattr;

    struct work work;
    memset(&work, 0, sizeof(work));

    EXPECT_NE(insertdbgo_xattrs_avail(&work, &ed, nullptr), SQLITE_DONE);
}

TEST(insertsumdb, nullptr) {
    EXPECT_EQ(insertsumdb(nullptr, nullptr, nullptr, nullptr, nullptr), 1);
}

TEST(inserttreesumdb, nullptr) {
    struct sum su;
    memset(&su, 0, sizeof(su));
    EXPECT_EQ(inserttreesumdb("", nullptr, &su, 0, 0, 0), 1);
}

TEST(addqueryfuncs, path) {
    const char dirname[MAXPATH] = "dirname";

    struct work *work = new_work_with_name("index_root", 10, dirname, strlen(dirname));
    work->orig_root.data = "index_root";
    work->orig_root.len = strlen(work->orig_root.data);
    work->root_parent.data = "";
    work->root_parent.len = 0;
    work->root_basename_len = work->orig_root.len;
    work->basename_len = strlen(dirname);

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    aqfctx_t ctx;
    ctx.in = nullptr;
    ctx.work = work;
    ASSERT_EQ(addqueryfuncs_with_context(db, &ctx), 0);

    char buf[MAXPATH] = {};
    char *output = buf;
    EXPECT_EQ(sqlite3_exec(db, "SELECT path();", copy_columns_callback, &output, nullptr), SQLITE_OK);

    EXPECT_STREQ(output, work->name);

    sqlite3_close(db);
    free(work);
}

TEST(addqueryfuncs, epath) {
    const char dirname[MAXPATH] = "dirname";

    struct work *work = new_work_with_name("index_root", 10, dirname, strlen(dirname));
    work->basename_len = strlen(dirname);
    work->root_parent.data = "index_root";     // currently at index_root/dirname
    work->root_parent.len = strlen(work->root_parent.data);

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    aqfctx_t ctx;
    ctx.in = nullptr;
    ctx.work = work;
    ASSERT_EQ(addqueryfuncs_with_context(db, &ctx), 0);

    char buf[MAXPATH] = {};
    char *output = buf;
    EXPECT_EQ(sqlite3_exec(db, "SELECT epath();", copy_columns_callback, &output, nullptr), SQLITE_OK);

    EXPECT_STREQ(output, dirname);

    sqlite3_close(db);
    free(work);
}

TEST(addqueryfuncs, fpath) {
    struct work *work = new_work_with_name(nullptr, 0, nullptr, 0);
    work->name_len = SNPRINTF(work->name, MAXPATH, "/");
    work->fullpath = nullptr;

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    aqfctx_t ctx;
    ctx.in = nullptr;
    ctx.work = work;
    ASSERT_EQ(addqueryfuncs_with_context(db, &ctx), 0);

    EXPECT_EQ(sqlite3_exec(db, "SELECT fpath();", nullptr, nullptr, nullptr), SQLITE_OK);
    EXPECT_NE(work->fullpath, nullptr);
    EXPECT_GT(work->fullpath_len, (size_t) 0);

    // copy current values
    const char *fullpath = work->fullpath;
    const size_t fullpath_len = work->fullpath_len;

    // call again - should not update fullpath
    EXPECT_EQ(sqlite3_exec(db, "SELECT fpath();", nullptr, nullptr, nullptr), SQLITE_OK);
    EXPECT_EQ(work->fullpath, fullpath);
    EXPECT_EQ(work->fullpath_len, fullpath_len);

    sqlite3_close(db);
    free(work->fullpath);
    free(work);
}

TEST(addqueryfuncs, rpath) {
    const char dirname[MAXPATH] = "dirname";

    struct work *work = new_work_with_name("index_root", 10, dirname, strlen(dirname));
    work->orig_root.data = "index_root";
    work->orig_root.len = strlen(work->orig_root.data);
    work->root_parent.data = "";
    work->root_parent.len = 0;
    work->root_basename_len = work->orig_root.len;
    work->basename_len = strlen(dirname);

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    aqfctx_t ctx;
    ctx.in = nullptr;
    ctx.work = work;
    ASSERT_EQ(addqueryfuncs_with_context(db, &ctx), 0);

    // directory
    for(int rollupscore : {0, 1}) {
        char query[MAXSQL] = {};
        SNPRINTF(query, MAXSQL, "SELECT rpath('%s', %d);", dirname, rollupscore);

        // the path returned by the query is the path without the index prefix
        char buf[MAXPATH] = {};
        char *output = buf;
        EXPECT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);

        EXPECT_STREQ(output, work->name);
    }

    // non-directory
    const char entry[] = "entry";
    char entry_path[MAXPATH];
    SNFORMAT_S(entry_path, sizeof(entry_path), 3,
               work->name, work->name_len,
               "/", (std::size_t) 1,
               entry, sizeof(entry) - 1);

    for(int rollupscore : {0, 1}) {
        char query[MAXSQL] = {};
        SNPRINTF(query, MAXSQL, "SELECT rpath('%s', %d, '%s');", dirname, rollupscore, entry);

        // the path returned by the query is the path without the index prefix
        char buf[MAXPATH] = {};
        char *output = buf;
        EXPECT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);

        EXPECT_STREQ(output, entry_path);
    }

    sqlite3_close(db);
    free(work);
}

TEST(addqueryfuncs, spath) {
    const char dirname[] = "dirname";
    const char source[]  = "source/prefix";

    struct input in;
    in.source_prefix.data = source;
    in.source_prefix.len = strlen(source);

    struct work *work = new_work_with_name("index_root", 10, dirname, strlen(dirname));
    work->orig_root.data = "index_root";
    work->orig_root.len = strlen(work->orig_root.data);
    work->root_parent.data = "";
    work->root_parent.len = 0;
    work->root_basename_len = work->orig_root.len;
    work->basename_len = strlen(dirname);

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    aqfctx_t ctx;
    ctx.in = &in;
    ctx.work = work;
    ASSERT_EQ(addqueryfuncs_with_context(db, &ctx), 0);

    char source_path[MAXPATH];
    SNFORMAT_S(source_path, sizeof(source_path), 3,
               in.source_prefix.data, in.source_prefix.len,
               "/", (std::size_t) 1,
               dirname, sizeof(dirname) - 1);

    // directory
    for(int rollupscore : {0, 1}) {
        char query[MAXSQL] = {};
        SNPRINTF(query, MAXSQL, "SELECT spath('%s', %d);", dirname, rollupscore);

        // the path returned by the query is the path without the index prefix
        char buf[MAXPATH] = {};
        char *output = buf;
        EXPECT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);

        EXPECT_STREQ(output, source_path);
    }

    const char entry[] = "entry;";
    SNFORMAT_S(source_path, sizeof(source_path), 5,
               in.source_prefix.data, in.source_prefix.len,
               "/", (std::size_t) 1,
               dirname, sizeof(dirname) - 1,
               "/", (std::size_t) 1,
               entry, sizeof(entry) - 1);

    // non-directory
    for(int rollupscore : {0, 1}) {
        char query[MAXSQL] = {};
        SNPRINTF(query, MAXSQL, "SELECT spath('%s', %d, '%s');", dirname, rollupscore, entry);

        // the path returned by the query is the path without the index prefix
        char buf[MAXPATH] = {};
        char *output = buf;
        EXPECT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);

        EXPECT_STREQ(output, source_path);
    }

    // missing source prefix
    char query[MAXSQL] = {};
    SNPRINTF(query, MAXSQL, "SELECT spath('%s', %d);", dirname, 0);

    char *err = nullptr;

    in.source_prefix.data = nullptr;
    in.source_prefix.len = strlen(source);
    EXPECT_EQ(sqlite3_exec(db, query, copy_columns_callback, nullptr, &err), SQLITE_ERROR);
    EXPECT_NE(err, nullptr);
    sqlite3_free(err);
    err = nullptr;

    in.source_prefix.data = source;
    in.source_prefix.len = 0;
    EXPECT_EQ(sqlite3_exec(db, query, copy_columns_callback, nullptr, &err), SQLITE_ERROR);
    EXPECT_NE(err, nullptr);
    sqlite3_free(err);
    err = nullptr;

    sqlite3_close(db);
    free(work);
}

TEST(addqueryfuncs, uidtouser) {
    // user caller's uid
    const uid_t uid = getuid();

    struct passwd pwd;
    struct passwd *result = nullptr;

    char ubuf[MAXPATH] = {};
    ASSERT_EQ(getpwuid_r(uid, &pwd, ubuf, sizeof(ubuf), &result), 0);
    ASSERT_EQ(result, &pwd);

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);

    // use value obtained from summary table
    char query[MAXSQL] = {};
    SNPRINTF(query, MAXSQL, "SELECT uidtouser('%d');", uid);

    char buf[MAXPATH] = {};
    char *output = buf;
    ASSERT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);

    EXPECT_STREQ(output, pwd.pw_name);

    sqlite3_close(db);
}

TEST(addqueryfuncs, gidtogroup) {
    // user caller's gid
    const gid_t gid = getgid();

    struct group grp;
    struct group *result = nullptr;

    char gbuf[MAXPATH] = {};
    ASSERT_EQ(getgrgid_r(gid, &grp, gbuf, sizeof(gbuf), &result), 0);
    ASSERT_EQ(result, &grp);

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);

    // use value obtained from summary table
    char query[MAXSQL] = {};
    SNPRINTF(query, MAXSQL, "SELECT gidtogroup('%d');", gid);

    char buf[MAXPATH] = {};
    char *output = buf;
    ASSERT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);

    EXPECT_STREQ(output, grp.gr_name);

    sqlite3_close(db);
}

TEST(addqueryfuncs, modetotxt) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);

    for(mode_t perm = 0; perm < 01000; perm++) {
        char query[MAXSQL] = {};
        char buf[11] = {};
        char *output = buf;
        char expected[11] = {};

        // file
        SNPRINTF(query, MAXSQL, "SELECT modetotxt(%zu);", (size_t) perm);
        ASSERT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);
        EXPECT_STREQ(output, modetostr(expected, 11, perm));

        // directory
        SNPRINTF(query, MAXSQL, "SELECT modetotxt(%zu);", perm | S_IFDIR);
        ASSERT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);
        EXPECT_STREQ(output, modetostr(expected, 11, perm | S_IFDIR));
    }

    sqlite3_close(db);
}

TEST(addqueryfuncs, strftime) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);

    const char fmt[] = "%a %A %b %B %c %C %d %D %e %F %g %G %h %H %I %j %m %M %n %p %r %R %S %t %T %u %U %V %w %W %x %X %y %Y %z %Z %%";

    const time_t now = time(nullptr);

    char query[MAXSQL] = {};
    SNPRINTF(query, MAXSQL, "SELECT strftime('%s', %d);", fmt, (int) now);

    char buf[MAXPATH] = {};
    char *output = buf;
    ASSERT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);

    char expected[MAXSQL] = {};
    struct tm tm;
    ASSERT_NE(localtime_r(&now, &tm), nullptr);
    EXPECT_NE(strftime(expected, MAXSQL, fmt, &tm), (size_t) 0);

    EXPECT_STREQ(output, expected);

    sqlite3_close(db);
}

// uint64_t goes up to E
static const char SIZE[] = {'K',    // 10
                            'M',    // 20
                            'G',    // 30
                            'T',    // 40
                            'P',    // 50
                            'E',    // 60
};

TEST(addqueryfuncs, blocksize) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);

    const char expecteds[] = {'1', '1', '2'};

    size_t Bsize = 1;
    size_t iBsize = 1;
    for(size_t i = 0; i < sizeof(SIZE); i++) {
        Bsize  *= 1000;
        const size_t Binputs[] = {
            Bsize - 1,
            Bsize,
            Bsize + 1
        };

        iBsize *= 1024;
        const size_t iBinputs[] = {
            iBsize - 1,
            iBsize,
            iBsize + 1
        };

        for(size_t j = 0; j < 3; j++) {
            char query[MAXSQL] = {};
            char buf[MAXPATH] = {};
            char *output = buf;
            char expected[MAXPATH] = {};

            SNPRINTF(query, MAXSQL, "SELECT blocksize(%zu, '%c');", iBinputs[j], SIZE[i]);
            ASSERT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);
            SNPRINTF(expected, MAXPATH, "%c%c", expecteds[j], SIZE[i]);
            EXPECT_STREQ(output, expected);

            SNPRINTF(query, MAXSQL, "SELECT blocksize(%zu, '%cB');", Binputs[j], SIZE[i]);
            ASSERT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);
            SNPRINTF(expected, MAXPATH, "%c%cB", expecteds[j], SIZE[i]);
            EXPECT_STREQ(output, expected);

            SNPRINTF(query, MAXSQL, "SELECT blocksize(%zu, '%ciB');", iBinputs[j], SIZE[i]);
            ASSERT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);
            SNPRINTF(expected, MAXPATH, "%c%ciB", expecteds[j], SIZE[i]);
            EXPECT_STREQ(output, expected);
        }
    }

    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize('', '');",      copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* non-integer size argument */
    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize('abc', '');",   copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* missing size argument */
    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize(0, 'i');",      copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* single bad character */
    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize(0, 'iB');",     copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* 1st character isn't valid */
    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize(0, 'ij');",     copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* 2nd character isn't B */
    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize(0, 'AiB');",    copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* 1st character isn't valid */
    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize(0, 'AjB');",    copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* 2nd character isn't i */
    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize(0, 'Aij');",    copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* 3nd character isn't B */
    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize(0, '0KB');",    copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* block coefficient is 0 */
    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize(0, '1.2KiB');", copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* decimal point is not allowed */
    ASSERT_EQ(sqlite3_exec(db, "SELECT blocksize(0, 'KiBGiB');", copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* suffix is too long */

    sqlite3_close(db);
}

TEST(addqueryfuncs, human_readable_size) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);

    char query[MAXSQL] = {};
    char buf[MAXPATH] = {};
    char *output = buf;

    size_t size = 1;

    SNPRINTF(query, MAXSQL, "SELECT human_readable_size(%zu);", size);
    ASSERT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, "1.0");

    // greater than 1K - has unit suffix
    for(size_t i = 0; i < sizeof(SIZE); i++) {
        char expected[MAXPATH] = {};

        size *= 1024;

        SNPRINTF(query, MAXSQL, "SELECT human_readable_size(%zu);", size + (size / 10));
        ASSERT_EQ(sqlite3_exec(db, query, copy_columns_callback, &output, nullptr), SQLITE_OK);
        SNPRINTF(expected, MAXPATH, "1.1%c", SIZE[i]);
        EXPECT_STREQ(output, expected);
    }

    ASSERT_EQ(sqlite3_exec(db, "SELECT human_readable_size('');",    copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* empty input */
    ASSERT_EQ(sqlite3_exec(db, "SELECT human_readable_size('abc');", copy_columns_callback, nullptr, nullptr), SQLITE_ERROR); /* non-integer input */

    sqlite3_close(db);
}

TEST(addqueryfuncs, starting_point) {
    struct work *work = new_work_with_name(nullptr, 0, nullptr, 0);
    work->orig_root.data = "/index_root";
    work->orig_root.len = strlen(work->orig_root.data);

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    aqfctx_t ctx;
    ctx.in = nullptr;
    ctx.work = work;
    ASSERT_EQ(addqueryfuncs_with_context(db, &ctx), 0);

    char buf[MAXPATH] = {};
    char *output = buf;
    ASSERT_EQ(sqlite3_exec(db, "SELECT starting_point();", copy_columns_callback, &output, nullptr), SQLITE_OK);

    EXPECT_STREQ(output, work->orig_root.data);

    sqlite3_close(db);
    free(work);
}

TEST(addqueryfuncs, level) {
    struct work *work = new_work_with_name(nullptr, 0, nullptr, 0);

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    aqfctx_t ctx;
    ctx.in = nullptr;
    ctx.work = work;

    for(work->level = 0; work->level < 10; work->level++) {
        ASSERT_EQ(addqueryfuncs_with_context(db, &ctx), 0);

        char buf[MAXPATH] = {};
        char *output = buf;
        ASSERT_EQ(sqlite3_exec(db, "SELECT level();", copy_columns_callback, &output, nullptr), SQLITE_OK);

        char expected[MAXPATH] = {};
        SNPRINTF(expected, MAXPATH, "%zu", work->level);

        EXPECT_STREQ(output, expected);
    }

    sqlite3_close(db);
    free(work);
}

TEST(addqueryfuncs, pinode) {
    struct work *work = new_work_with_name(nullptr, 0, nullptr, 0);
    work->pinode = 0x12345;

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    aqfctx_t ctx;
    ctx.in = nullptr;
    ctx.work = work;

    for(work->level = 0; work->level < 10; work->level++) {
        ASSERT_EQ(addqueryfuncs_with_context(db, &ctx), 0);

        char buf[MAXPATH] = {};
        char *output = buf;
        ASSERT_EQ(sqlite3_exec(db, "SELECT pinode();", copy_columns_callback, &output, nullptr), SQLITE_OK);

        char expected[MAXPATH] = {};
        SNPRINTF(expected, MAXPATH, "%lld", work->pinode);

        EXPECT_STREQ(output, expected);
    }

    sqlite3_close(db);
    free(work);
}

TEST(addqueryfuncs, basename) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);

    char buf[MAXPATH] = {};
    char *output = buf;

    /* from basename(3) manpage */

    ASSERT_EQ(sqlite3_exec(db, "SELECT basename('/usr/lib');", copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, "lib");

    ASSERT_EQ(sqlite3_exec(db, "SELECT basename('/usr/');", copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, "usr");

    ASSERT_EQ(sqlite3_exec(db, "SELECT basename('usr');", copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, "usr");

    ASSERT_EQ(sqlite3_exec(db, "SELECT basename('/');", copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, "/");

    ASSERT_EQ(sqlite3_exec(db, "SELECT basename('.');", copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, ".");

    ASSERT_EQ(sqlite3_exec(db, "SELECT basename('..');", copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, "..");

    /* not from manpage */

    ASSERT_EQ(sqlite3_exec(db, "SELECT basename(NULL);", copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, "");

    sqlite3_close(db);
}

TEST(addqueryfuncs, strop) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);

    char buf[MAXPATH] = {};
    char *output = buf;

    ASSERT_EQ(sqlite3_exec(db, "SELECT strop('echo abc def');", copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, "abc def");

    char *err = nullptr;

    ASSERT_EQ(sqlite3_exec(db, "SELECT strop('');", copy_columns_callback, &output, &err), SQLITE_ERROR);
    EXPECT_NE(err, nullptr);
    sqlite3_free(err);
    err = nullptr;

    ASSERT_EQ(sqlite3_exec(db, "SELECT strop('echo');", copy_columns_callback, &output, &err), SQLITE_ERROR);
    EXPECT_NE(err, nullptr);
    sqlite3_free(err);
    err = nullptr;

    // not enough file descriptors
    {
        struct rlimit orig_fds;
        ASSERT_EQ(getrlimit(RLIMIT_NOFILE, &orig_fds), 0);

        struct rlimit fewer_fds = orig_fds;
        fewer_fds.rlim_cur = 3;
        ASSERT_EQ(setrlimit(RLIMIT_NOFILE, &fewer_fds), 0);

        ASSERT_EQ(sqlite3_exec(db, "SELECT strop('echo abc def');", copy_columns_callback, &output, &err), SQLITE_ERROR);
        EXPECT_NE(err, nullptr);
        sqlite3_free(err);
        err = nullptr;

        ASSERT_EQ(setrlimit(RLIMIT_NOFILE, &orig_fds), 0);
    }

    sqlite3_close(db);
}

TEST(addqueryfuncs, intop) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);

    char buf[MAXPATH] = {};
    char *output = buf;

    ASSERT_EQ(sqlite3_exec(db, "SELECT intop('echo 123');", copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, "123");

    // wc is part of coreutils
    ASSERT_EQ(sqlite3_exec(db, "SELECT intop('echo 123 | wc -l');", copy_columns_callback, &output, nullptr), SQLITE_OK);
    EXPECT_STREQ(output, "1");

    char *err = nullptr;

    ASSERT_EQ(sqlite3_exec(db, "SELECT intop('');", copy_columns_callback, &output, &err), SQLITE_ERROR);
    EXPECT_NE(err, nullptr);
    sqlite3_free(err);
    err = nullptr;

    ASSERT_EQ(sqlite3_exec(db, "SELECT intop('echo');", copy_columns_callback, &output, &err), SQLITE_ERROR);
    EXPECT_NE(err, nullptr);
    sqlite3_free(err);
    err = nullptr;

    ASSERT_EQ(sqlite3_exec(db, "SELECT intop('echo abc');", copy_columns_callback, &output, &err), SQLITE_ERROR);
    EXPECT_NE(err, nullptr);
    sqlite3_free(err);
    err = nullptr;

    // not enough file descriptors
    {
        struct rlimit orig_fds;
        ASSERT_EQ(getrlimit(RLIMIT_NOFILE, &orig_fds), 0);

        struct rlimit fewer_fds = orig_fds;
        fewer_fds.rlim_cur = 3;
        ASSERT_EQ(setrlimit(RLIMIT_NOFILE, &fewer_fds), 0);

        ASSERT_EQ(sqlite3_exec(db, "SELECT intop('echo 123');", copy_columns_callback, &output, &err), SQLITE_ERROR);
        EXPECT_NE(err, nullptr);
        sqlite3_free(err);
        err = nullptr;

        ASSERT_EQ(setrlimit(RLIMIT_NOFILE, &orig_fds), 0);
    }

    sqlite3_close(db);
}

static int copy_blob_column_callback(void *args, int count, char **data, char **columns) {
    (void) count; (void) columns;

    str_t *out = (str_t *) args;

    size_t len = 0;
    if (sscanf(data[0], "%zu", &len) != 1) {
        fprintf(stderr, "Error: Could not parse blob length: %s\n", data[0]);
        return SQLITE_ERROR;
    }

    str_alloc_existing(out, len);
    memcpy(out->data, data[1], len);

    return SQLITE_OK;
}

TEST(addqueryfuncs, blobop) {
    const char data[] = "abc def\n\x00\x01\x02 \x03\x04\x05\nghi jkl";
    const std::size_t len = sizeof(data) - 1;

    // sqlite3 does not like binary in SQL statements, so write contents to temp file first
    char temp[] = "XXXXXX";
    int fd = mkstemp(temp);
    ASSERT_GT(fd, -1);
    ASSERT_EQ(write(fd, data, len), (ssize_t) len);
    close(fd);

    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);

    // have to insert into table to get length later without opening file twice
    char cmd[1024];
    snprintf(cmd, sizeof(cmd), "CREATE TABLE data(col BLOB); INSERT INTO data SELECT blobop('cat %s');", temp);
    ASSERT_EQ(sqlite3_exec(db, cmd, nullptr, nullptr, nullptr), SQLITE_OK);

    str_t output;
    char *err = nullptr;
    ASSERT_EQ(sqlite3_exec(db, "SELECT length(col), col FROM data;",
                           copy_blob_column_callback, &output, &err), SQLITE_OK);
    EXPECT_EQ(err, nullptr);
    EXPECT_EQ(output.len, len);
    ASSERT_NE(output.data, nullptr);
    EXPECT_EQ(memcmp(output.data, data, len), 0);
    str_free_existing(&output);
    sqlite3_free(err);
    err = nullptr;

    // not enough file descriptors
    {
        struct rlimit orig_fds;
        ASSERT_EQ(getrlimit(RLIMIT_NOFILE, &orig_fds), 0);

        struct rlimit fewer_fds = orig_fds;
        fewer_fds.rlim_cur = 3;
        ASSERT_EQ(setrlimit(RLIMIT_NOFILE, &fewer_fds), 0);

        ASSERT_EQ(sqlite3_exec(db, "SELECT blobop('echo blob');", copy_columns_callback, &output, &err), SQLITE_ERROR);
        EXPECT_NE(err, nullptr);
        sqlite3_free(err);
        err = nullptr;

        ASSERT_EQ(setrlimit(RLIMIT_NOFILE, &orig_fds), 0);
    }

    sqlite3_close(db);
    remove(temp);
}

static int double_callback(void *arg, int, char **data, char **) {
    if (!data[0]) {
        return SQLITE_ERROR;
    }
    return !(sscanf(data[0], "%lf", (double *) arg) == 1);
}

TEST(addqueryfuncs, stdevs) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);
    ASSERT_EQ(sqlite3_exec(db, "CREATE TABLE t (value INT);", nullptr, nullptr, nullptr), SQLITE_OK);

    double stdev = 0;

    // no values
    {
        EXPECT_EQ(sqlite3_exec(db, "SELECT stdevs(value) FROM t", double_callback, &stdev, nullptr), SQLITE_ABORT);
    }

    // 1 value
    {
        ASSERT_EQ(sqlite3_exec(db, "INSERT INTO t (value) VALUES (1);", nullptr, nullptr, nullptr), SQLITE_OK);

        EXPECT_EQ(sqlite3_exec(db, "SELECT stdevs(value) FROM t", double_callback, &stdev, nullptr), SQLITE_ABORT);
    }

    // 5 values
    {
        ASSERT_EQ(sqlite3_exec(db, "INSERT INTO t (value) VALUES (2), (3), (4), (5);", nullptr, nullptr, nullptr), SQLITE_OK);

        EXPECT_EQ(sqlite3_exec(db, "SELECT stdevs(value) FROM t", double_callback, &stdev, nullptr), SQLITE_OK);
        EXPECT_DOUBLE_EQ(stdev * stdev * 2, (double) 5); /* sqrt(5 / 2) */
    }

    sqlite3_close(db);
}

TEST(addqueryfuncs, stdevp) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);
    ASSERT_EQ(sqlite3_exec(db, "CREATE TABLE t (value INT);", nullptr, nullptr, nullptr), SQLITE_OK);

    double stdev = 0;

    // no values
    {
        EXPECT_EQ(sqlite3_exec(db, "SELECT stdevp(value) FROM t", double_callback, &stdev, nullptr), SQLITE_ABORT);
    }

    // 1 value
    {
        ASSERT_EQ(sqlite3_exec(db, "INSERT INTO t (value) VALUES (1);", nullptr, nullptr, nullptr), SQLITE_OK);

        EXPECT_EQ(sqlite3_exec(db, "SELECT stdevp(value) FROM t", double_callback, &stdev, nullptr), SQLITE_ABORT);
    }

    // 5 values
    {
        ASSERT_EQ(sqlite3_exec(db, "INSERT INTO t (value) VALUES (2), (3), (4), (5);", nullptr, nullptr, nullptr), SQLITE_OK);

        EXPECT_EQ(sqlite3_exec(db, "SELECT stdevp(value) FROM t", double_callback, &stdev, nullptr), SQLITE_OK);
        EXPECT_FLOAT_EQ(stdev * stdev, (double) 2); /* sqrt(2); need to use float instead of double due to slightly too large differences */
    }

    sqlite3_close(db);
}

TEST(addqueryfuncs, median) {
    sqlite3 *db = nullptr;
    ASSERT_EQ(sqlite3_open(SQLITE_MEMORY, &db), SQLITE_OK);
    ASSERT_NE(db, nullptr);

    ASSERT_EQ(addqueryfuncs(db), 0);
    ASSERT_EQ(sqlite3_exec(db, "CREATE TABLE t (value INT);", nullptr, nullptr, nullptr), SQLITE_OK);

    double median = 0;

    // no values
    {
        EXPECT_EQ(sqlite3_exec(db, "SELECT median(value) FROM t", double_callback, &median, nullptr), SQLITE_ABORT);
    }

    // 1 value short circuit
    {
        ASSERT_EQ(sqlite3_exec(db, "INSERT INTO t (value) VALUES (1);", nullptr, nullptr, nullptr), SQLITE_OK);

        EXPECT_EQ(sqlite3_exec(db, "SELECT median(value) FROM t", double_callback, &median, nullptr), SQLITE_OK);
        EXPECT_DOUBLE_EQ(median, (double) 1);
    }

    // 2 values short circuit
    {
        ASSERT_EQ(sqlite3_exec(db, "INSERT INTO t (value) VALUES (2);", nullptr, nullptr, nullptr), SQLITE_OK);

        EXPECT_EQ(sqlite3_exec(db, "SELECT median(value) FROM t", double_callback, &median, nullptr), SQLITE_OK);
        EXPECT_DOUBLE_EQ(median, (double) 1.5);
    }

    // odd number of values
    {
        ASSERT_EQ(sqlite3_exec(db, "INSERT INTO t (value) VALUES (3), (4), (5);", nullptr, nullptr, nullptr), SQLITE_OK);

        EXPECT_EQ(sqlite3_exec(db, "SELECT median(value) FROM t", double_callback, &median, nullptr), SQLITE_OK);
        EXPECT_DOUBLE_EQ(median, (double) 3);
    }

    // even number of values
    {
        ASSERT_EQ(sqlite3_exec(db, "INSERT INTO t (value) VALUES (6);", nullptr, nullptr, nullptr), SQLITE_OK);

        EXPECT_EQ(sqlite3_exec(db, "SELECT median(value) FROM t", double_callback, &median, nullptr), SQLITE_OK);
        EXPECT_DOUBLE_EQ(median, (double) 3.5);
    }

    sqlite3_close(db);
}

TEST(sqlite_uri_path, none) {
    const char src[] = "prefix/basename";
    size_t src_len = strlen(src);
    char dst[32] = {0};
    const char *expected = src;

    const size_t dst_len = sqlite_uri_path(dst, sizeof(dst), src, &src_len);

    EXPECT_EQ(src_len, strlen(src));
    EXPECT_EQ(dst_len, strlen(expected));
    EXPECT_STREQ(dst, expected);
}

TEST(sqlite_uri_path, 23) {
    const char src[] = "prefix/#/basename";
    size_t src_len = strlen(src);
    char dst[32] = {0};
    const char expected[] = "prefix/%23/basename";

    const size_t dst_len = sqlite_uri_path(dst, sizeof(dst), src, &src_len);

    EXPECT_EQ(src_len, strlen(src));
    EXPECT_EQ(dst_len, strlen(expected));
    EXPECT_STREQ(dst, expected);
}

TEST(sqlite_uri_path, 3f) {
    const char src[] = "prefix/?/basename";
    size_t src_len = strlen(src);
    char dst[32] = {0};
    const char expected[] = "prefix/%3f/basename";

    const size_t dst_len = sqlite_uri_path(dst, sizeof(dst), src, &src_len);

    EXPECT_EQ(src_len, strlen(src));
    EXPECT_EQ(dst_len, strlen(expected));
    EXPECT_STREQ(dst, expected);
}

TEST(sqlite_uri_path, 25) {
    const char src[] = "prefix/%/basename";
    size_t src_len = strlen(src);
    char dst[32] = {0};
    const char expected[] = "prefix/%25/basename";

    const size_t dst_len = sqlite_uri_path(dst, sizeof(dst), src, &src_len);

    EXPECT_EQ(src_len, strlen(src));
    EXPECT_EQ(dst_len, strlen(expected));
    EXPECT_STREQ(dst, expected);
}

TEST(sqlite_uri_path, not_enough_space) {
    const char src[] = "prefix/#/basename";

    // does not hit conversion
    {
        size_t src_len = strlen(src);
        char dst[7] = {0};
        const char expected[] = "prefix/";

        const size_t dst_len = sqlite_uri_path(dst, sizeof(dst), src, &src_len);

        EXPECT_EQ(src_len, (size_t) 7); // prefix/
        EXPECT_EQ(dst_len, strlen(expected));
        EXPECT_EQ(memcmp(expected, dst, dst_len), 0);
    }

    // # -> %
    {
        size_t src_len = strlen(src);
        char dst[8] = {0};
        const char expected[] = "prefix/%";

        const size_t dst_len = sqlite_uri_path(dst, sizeof(dst), src, &src_len);

        EXPECT_EQ(src_len, (size_t) 8); // prefix/#
        EXPECT_EQ(dst_len, strlen(expected));
        EXPECT_EQ(memcmp(expected, dst, dst_len), 0);
    }

    // # -> %2
    {
        size_t src_len = strlen(src);
        char dst[9] = {0};
        const char expected[] = "prefix/%2";

        const size_t dst_len = sqlite_uri_path(dst, sizeof(dst), src, &src_len);

        EXPECT_EQ(src_len, (size_t) 8); // prefix/#
        EXPECT_EQ(dst_len, strlen(expected));
        EXPECT_EQ(memcmp(expected, dst, dst_len), 0);
    }
}

TEST(get_rollupscore, nullptr) {
    EXPECT_EQ(get_rollupscore(nullptr, nullptr), 1);
}

TEST(bottomup_collect_treesummary, nullptr) {
    EXPECT_EQ(bottomup_collect_treesummary(nullptr, "", nullptr, ROLLUPSCORE_KNOWN_YES), 1);

    char dirname[] = "XXXXXX";
    ASSERT_EQ(mkdtemp(dirname), dirname);

    sll_t sll;
    sll_init(&sll);
    sll_push(&sll, dirname);

    EXPECT_EQ(bottomup_collect_treesummary(nullptr, "", &sll, ROLLUPSCORE_KNOWN_YES), 1);

    sll_destroy(&sll, nullptr);
    EXPECT_EQ(rmdir(dirname), 0);
}

static const char CREATE_TABLE_TEST[] = "CREATE TABLE test(i INT, f FLOAT, t TEXT, b BLOB, n NULL, d DATE);";

TEST(get_col_types, have_cols) {
    sqlite3 *db = nullptr;
    refstr_t str = {};
    int cols = 0;

    ASSERT_EQ(sqlite3_open_v2(SQLITE_MEMORY, &db,
                              SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_URI,
                              nullptr), SQLITE_OK);

    ASSERT_EQ(sqlite3_exec(db, CREATE_TABLE_TEST,
                           nullptr, nullptr, nullptr), SQLITE_OK);

    str.data = "SELECT * FROM test;";
    str.len = strlen(str.data);

    int *types = nullptr;
    EXPECT_EQ(get_col_types(db, &str, &types, &cols), 0);
    ASSERT_NE(types, nullptr);

    const int expected[] = { SQLITE_INTEGER, SQLITE_FLOAT, SQLITE_TEXT, SQLITE_BLOB, SQLITE_NULL, 0};
    EXPECT_EQ((std::size_t) cols, sizeof(expected) / sizeof(expected[0]));

    for(std::size_t i = 0; i < (sizeof(expected) / sizeof(expected[0])); i++) {
        EXPECT_EQ(types[i], expected[i]);
    }

    free(types);

    sqlite3_close(db);
}

TEST(get_col_types, no_cols) {
    sqlite3 *db = nullptr;
    refstr_t str = {};
    int cols = 0;

    ASSERT_EQ(sqlite3_open_v2(SQLITE_MEMORY, &db,
                              SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_URI,
                              nullptr), SQLITE_OK);

    ASSERT_EQ(sqlite3_exec(db, CREATE_TABLE_TEST,
                           nullptr, nullptr, nullptr), SQLITE_OK);

    str.data = "INSERT INTO test (i) VALUES (0);";
    str.len = strlen(str.data);

    int *types = nullptr;
    EXPECT_EQ(get_col_types(db, &str, &types, &cols), -1);
    EXPECT_EQ(types, nullptr);

    sqlite3_close(db);
}

TEST(get, col_types) {
    sqlite3 *db = nullptr;
    refstr_t str = {};
    int cols = 0;
    int *types = nullptr;

    ASSERT_EQ(sqlite3_open_v2(SQLITE_MEMORY, &db,
                              SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_URI,
                              nullptr),
              SQLITE_OK);
    ASSERT_EQ(sqlite3_exec(db, CREATE_TABLE_TEST,
                           nullptr, nullptr, nullptr), SQLITE_OK);

    // bad db
    EXPECT_EQ(get_col_types(nullptr, &str, &types, &cols), -1);
    EXPECT_EQ(types, nullptr);

    // bad SQL
    EXPECT_EQ(get_col_types(db,      &str, &types, &cols), -1);
    EXPECT_EQ(types, nullptr);

    // &cols == nullptr will break

    str.data = "bad SQL";
    str.len = strlen(str.data);

    EXPECT_EQ(get_col_types(db, &str, &types, &cols), -1);
    EXPECT_EQ(types, nullptr);

    sqlite3_close(db);
}

TEST(get, col_names) {
    sqlite3 *db = nullptr;
    refstr_t sql = {};
    char **names = nullptr;
    std::size_t *lens = nullptr;
    int cols = 0;

    // bad db
    EXPECT_EQ(get_col_names(nullptr,  &sql, &names, &lens, &cols), -1);

    ASSERT_EQ(sqlite3_open_v2(SQLITE_MEMORY, &db,
                              SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE | SQLITE_OPEN_URI,
                              nullptr),
              SQLITE_OK);

    // good db, bad sql
    sql.data = "";
    sql.len = 0;
    EXPECT_EQ(get_col_names(db,  &sql, &names, &lens, &cols), -1);

    // good sql
    // since the columns are not being pulled from a table, the columns are used as the names
    sql.data = "SELECT 1, 'abc' AS def;";
    sql.len = 24;
    EXPECT_EQ(get_col_names(db,  &sql, &names, &lens, &cols), 0);
    EXPECT_NE(names, nullptr);
    EXPECT_NE(lens, nullptr);
    EXPECT_EQ(cols, 2);

    EXPECT_STREQ(names[0], "1");
    EXPECT_EQ(lens[0], (std::size_t) 1);

    EXPECT_STREQ(names[1], "def");        // not 'abc'
    EXPECT_EQ(lens[1], (std::size_t) 3);

    free(lens);
    for(int i = 0; i < cols; i++) {
        free(names[i]);
    }
    free(names);

    sqlite3_close(db);
}
