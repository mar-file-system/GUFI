#!/usr/bin/env python2.7
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.


# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# -----
# NOTE:
# -----

# GUFI uses the C-Thread-Pool library.  The original version, written by
# Johan Hanssen Seferidis, is found at
# https://github.com/Pithikos/C-Thread-Pool/blob/master/LICENSE, and is
# released under the MIT License.  LANS, LLC added functionality to the
# original work.  The original work, plus LANS, LLC added functionality is
# found at https://github.com/jti-lanl/C-Thread-Pool, also under the MIT
# License.  The MIT License can be found at
# https://opensource.org/licenses/MIT.


# From Los Alamos National Security, LLC:
# LA-CC-15-039

# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.

# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



import argparse
import exceptions
import imp
import itertools
import os
import subprocess
import sys

import gufi_common

gufi_config = imp.load_source('gufi_config', os.path.join(os.path.dirname(os.path.realpath(__file__)), 'gufi_config'))

def build(args, root_uid = 0, root_gid = 0):
    select = [args.select] if args.select else []

    where = []

    # if not ((os.geteuid() == root_uid) or (os.getegid() == root_gid)):
    #     where  += ['(uid == {})'.format(os.getuid())]
    #     # where  += ['(uid == {}) OR (gid in {})'.format(os.getuid(), '(' + str(os.getgroups())[1:-1] + ')')]

    if args.uid:
        where += ['uid == "{}"'.format(args.uid)]

    return select, where

def space(args, order=''):
    select, where = build(args)
    entries       = gufi_common.build_query(select + ['uid', 'TOTAL(size) AS space'],  ['entries'], where, ['uid'], ['space {}'.format(order)], args.num_results)
    intermediate  = None
    aggregate     = gufi_common.build_query(select + ['uid', 'TOTAL(space) AS space'], ['entries'], where, ['uid'], ['space {}'.format(order)], args.num_results)
    return entries, intermediate, aggregate

def files(args, order=''):
    select, where = build(args)
    entries       = gufi_common.build_query(select + ['uid', 'COUNT(*) AS files'],     ['entries'], where, ['uid'], ['files {}'.format(order)], args.num_results)
    intermediate  = None
    aggregate     = gufi_common.build_query(select + ['uid', 'TOTAL(files) AS files'], ['entries'], where, ['uid'], ['files {}'.format(order)], args.num_results)
    return entries, intermediate, aggregate

def total_space(args, *ignored):
    _, where = build(args)
    entries      = gufi_common.build_query(['TOTAL(size) AS size'], ['entries'], where, None, None, None, None)
    intermediate = gufi_common.build_query(['TOTAL(size) AS size'], ['entries'], None,  None, None, None, None)
    return entries, intermediate, intermediate

def total_files(args, *ignored):
    _, where = build(args)
    entries      = gufi_common.build_query(['COUNT(*)     AS count'], ['entries'], where, None, None, None, None)
    aggregate    = gufi_common.build_query(['TOTAL(count) AS count'], ['entries'], None,  None, None, None, None)
    return entries, None, aggregate

def directory_count(args, order = ''):
    _, where = build(args)
    entries      = gufi_common.build_query(['COUNT(*) AS count'], ['entries'], where, None, None, None, None)
    aggregate    = gufi_common.build_query(['count'],             ['entries'], where, None, ['count {}'.format(order)], args.num_results, None)
    return entries, None, aggregate

def get_leaf_dirs(path):
    '''Return an array containing path names of leaf directories under path'''
    return [dirpath for dirpath, dirnames, filenames in os.walk(path) if not dirnames]

def leaf_count(args, order = ''):
    args.paths = list(itertools.chain.from_iterable([get_leaf_dirs(path) for path in args.paths]))
    return directory_count(args, order)

def total_in_leaf(args, *ignored):
    _, where = build(args)
    entries        = gufi_common.build_query(['COUNT(*)     AS count'], ['entries'], where, None, None, None, None)
    intermediate   = gufi_common.build_query(['count'],                 ['entries'], None,  None, None, None, None)
    aggregate      = gufi_common.build_query(['TOTAL(count)'],          ['entries'], None,  None, None, None, None)

    args.paths = list(itertools.chain.from_iterable([get_leaf_dirs(path) for path in args.paths]))
    return entries, intermediate, aggregate

def median_in_leaf(args, *ignored):
    '''https://stackoverflow.com/a/15766121'''
    _, where = build(args)
    entries      = gufi_common.build_query(['COUNT(*) AS count'], ['entries'], where, None, None, None, None)
    intermediate = gufi_common.build_query(['count'],             ['entries'], None,  None, ['count'], '(2 - (SELECT COUNT(*) FROM entries) % 2)', ['OFFSET (SELECT (COUNT(*) - 1) / 2 FROM entries)'])
    aggregate    = gufi_common.build_query(['AVG(count)'],        ['entries'], None,  None, None, None, None)

    args.paths = list(itertools.chain.from_iterable([get_leaf_dirs(path) for path in args.paths]))
    return entries, intermediate, aggregate

def get_depth(path, sep = '/'):
    ret = []
    path_len = len(path)
    sub = path[-1] != sep # subtract 1 if the provided path did not include a separator because the split string will start with a separator

    for dirpath, _, _ in os.walk(path):
        ret += [[dirpath, len(dirpath[path_len:].split(sep)) - sub]]
    return ret

def depth(args, sep = '/'):
    ret = []
    for path in args.paths:
        ret += get_depth(path);
    return ret

def leaf_depth(args, sep = '/'):
    ret = []
    for path in args.paths:
        for leaf in get_leaf_dirs(path):
            ret += get_depth(leaf, sep)
    return ret

# mapping of valid non-query 'operation' argument values
NONQUERIES  = {'depth'      : depth,
               'leaf-depth' : leaf_depth}

# mapping of valid query 'operation' argument values to array generators
QUERIES = {'space'           : space,
           'files'           : files,
           'total-space'     : total_space,
           'total-files'     : total_files,
           'directory-count' : directory_count,
           'leaf-count'      : leaf_count,
           'total-leaf'      : total_in_leaf,
           'median-leaf'     : median_in_leaf}

# allowed keywords for sorting output (if applicable)
ASCENDING  = 'ASC'
DESCENDING = 'DESC'
ORDER = {'ASC'   : ASCENDING,
         'DESC'  : DESCENDING,
         'least' : ASCENDING,
         'most'  : DESCENDING}

if __name__=='__main__':
    # find and parse the configuration file first
    config = gufi_config.server_config(gufi_config.DEFAULT_CONFIG_PATH)

    # parse the arguments
    parser = argparse.ArgumentParser(description='GUFI statistics', add_help=False)
    # override help to not use -h
    parser.add_argument('--help',                                                 action='help',                                                  help='show this help message and exit')
    parser.add_argument('--version', '-v',                                        action='version',          version=os.path.basename(os.path.realpath(__file__)) + ' @GUFI_VERSION@')
    parser.add_argument('--order',         metavar='order', dest='order',         choices=ORDER.keys(),      default='',                          help='sort output (if applicable)')
    parser.add_argument('--delim',         metavar='c',     dest='delim',         type=gufi_common.get_char,                                      help='delimiter separating output columns')
    parser.add_argument('--maxdepth',      metavar='d',     dest='maxdepth',      type=gufi_common.get_non_negative,                              help='the maximum number of levels to search')
    parser.add_argument('--mindepth',      metavar='d',     dest='mindepth',      type=gufi_common.get_non_negative,                              help='the minimum number of levels to search')
    parser.add_argument('--num_results',   metavar='n',     dest='num_results',   type=gufi_common.get_non_negative,                              help='first n results')
    parser.add_argument('--select',        metavar='cols',  dest='select',        type=str,                                                       help='comma separated columns')
    parser.add_argument('--uid', '--user', metavar='u',     dest='uid',           type=gufi_common.get_uid,                                       help='restrict to user')
    parser.add_argument('--output',                         dest='output',        type=str,                                                       help='Output file prefix (Creates file <output>.tid)')
    parser.add_argument('--output-buffer', metavar='bytes', dest='output_buffer', type=gufi_common.get_positive,      default=4096,               help='Size of each thread\'s output buffer')
    parser.add_argument('operation',                                              choices=NONQUERIES.keys() + QUERIES.keys(),                     help='operation to perform')
    parser.add_argument('paths',                                                  type=str, action='append', nargs='*')

    args = parser.parse_args();

    # default to IndexRoot
    args.paths = args.paths[0]
    if not args.paths:
        args.paths = ['']

    # prepend the provided paths with the GUFI root path
    args.paths = [os.path.normpath(os.path.sep.join([config['IndexRoot'], path])) for path in args.paths]

    if args.order:
        args.order = ORDER[args.order]

    if args.operation in NONQUERIES:
        res = NONQUERIES[args.operation](args)
        res.sort(key = lambda pair: pair[1], reverse=(args.order==DESCENDING))
        for path, count in res[:args.num_results]:
            print path, count
    elif args.operation in QUERIES:
        entries, intermediate, aggregate = QUERIES[args.operation](args, ORDER[args.order] if args.order in ORDER else '')

        # create the query command
        query_cmd = [config['Exec'],
                     '-e', '0',
                     '-n', str(config['Threads'])]

        if entries is not None:
            query_cmd += ['-E', entries]
        else:
            query_cmd += ['-E', 'SELECT * FROM entries']

        if intermediate is not None:
            query_cmd += ['-J', intermediate]
        else:
            query_cmd += ['-J', 'SELECT * FROM entries']

        if aggregate is not None:
            query_cmd += ['-G', aggregate]
        else:
            query_cmd += ['-G', 'SELECT * FROM entries']

        if args.delim:
            query_cmd += ['-d', args.delim]

        if args.maxdepth:
            query_cmd += ['-z', str(args.maxdepth)]

        if args.mindepth:
            query_cmd += ['-y', str(args.mindepth)]

        if args.output:
            query_cmd += ['-o', args.output]

        if args.output_buffer:
            query_cmd += ['-B', str(args.output_buffer)]

        query = subprocess.Popen(query_cmd + args.paths)
        query.communicate() # block until query finishes

        sys.exit(query.returncode)
