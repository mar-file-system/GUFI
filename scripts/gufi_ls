#!/usr/bin/env python2.7
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.

# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



import argparse
import exceptions
import os
import subprocess
import sys

import gufi_common
import gufi_config

#        1024  1000  1024
SIZES = ['K',  'KB', 'KiB',
         'M',  'MB', 'MiB',
         'G',  'GB', 'GiB',
         'T',  'TB', 'TiB',
         'P',  'PB', 'PiB',
         'E',  'EB', 'EiB',
         'Z',  'ZB', 'ZiB',
         'Y',  'YB', 'YiB']

def select_size(args, name):
    # in GNU ls, order of arguments determines which one has precedence
    # here, --human-readable has precedence
    if args.human_readable:
        column = 'human_readable_size({}, ' + str(args.size_width) + ')'
    elif args.blocksize:
        column = 'blocksize({}, "' + args.blocksize + '", ' + str(args.size_width) + ')'
    else:
        column = 'printf("%' + str(args.size_width) + 'd", {})'

    return [column.format(name)]

TIME_STYLES = {
    'full-iso' : '%F %T %z',
    'long-iso' : '%F %T',
    'iso'      : '%m-%d %R',
    'locale'   : '%b  %e %H:%M',
}

def select_time(style, name):
    if not style:
        style = 'locale'

    try:
        column = 'strftime("' + TIME_STYLES[style] + '", {})'
    except:
        raise ValueError('gufi_ls: invalid argument \'{}\' for \'time style\''.format(style))

    return [column.format(name)]

def build_select(args):
    '''Build the SELECT portion of the query on the initial scan of entries'''
    select = []

    # ordering of concatenation matters

    if args.inode:
        select += ['inode']

    if args.size:
        select += ['blocks']

    if args.long_listing:
        select += ['modetotxt(mode)', 'printf("%' + str(args.nlink_width) + 'd", nlink)', 'uidtouser(uid, ' + str(args.user_width) + ')']
        if not args.no_group:
            select += ['gidtogroup(gid, ' + str(args.group_width) + ')']
        select += select_size(args, 'size') + select_time(args.time_style, 'mtime') + ['case when (type == "l") then (name || " -> " || linkname) else name end']

    else:
        # at minimum, print the file name
        select += ['name']

    return select

def build_recursive_select(args):
    '''Build the SELECT portion of the query on the initial scan of entries'''
    select = []

    # ordering of concatenation matters

    if args.inode:
        select += ['uinode']

    if args.size:
        select += ['ublocks']

    if args.long_listing:
        select += ['modetotxt(umode)', 'printf("%' + str(args.nlink_width) + 'd", unlink)', 'uidtouser(uuid, ' + str(args.user_width) + ')']
        if not args.no_group:
            select += ['gidtogroup(ugid, ' + str(args.group_width) + ')']
        select += select_size(args, 'usize') + select_time(args.time_style, 'umtime') + ['case when (utype == "l") then (ufullpath || "/" || uname || " -> " || ulinkname) else ufullpath || "/" || uname end']

    else:
        # at minimum, print the file name
        select += ['ufullpath || "/" || uname']

    return select

def build_where(args, name = None):
    '''Build the WHERE portion of the query'''
    where = []

    if name:
        where = ['name REGEXP "^{}$"'.format(name)]
    else:
        # -a: if show all, override -A
        if args.all:
            pass
        else:
            # -A: ignore . and ..
            if args.almost_all:
                where += ['name <> "." AND name <> ".."']

            # everything that's not hidden
            else:
                where += ['name REGEXP "^(?![\.]).*$"']

        # -B: ignore files that end with ~
        if args.ignore_backups == True:
            where += ['name REGEXP "^.*(?<![\~])$"']

    return where

def build_order_by(args):
    '''Build the ORDER BY portion of the query.'''
    order_by = []

    if args.sort_largest:
        order_by += ['size ' + ('ASC' if args.reverse else 'DESC')]

    if args.mtime:
        order_by += ['mtime ' + ('ASC' if args.reverse else 'DESC')]

    if len(order_by) == 0:
        order_by += ['name COLLATE NOCASE ' + ('DESC' if args.reverse else 'ASC')]

    if args.no_sort:
        order_by = []

    return order_by

def build_order_by_recursive(args):
    '''Build the ORDER BY portion of the query.'''
    order_by = []

    if args.sort_largest:
        order_by += ['usize ' + ('ASC' if args.reverse else 'DESC')]

    if args.mtime:
        order_by += ['umtime ' + ('ASC' if args.reverse else 'DESC')]

    if len(order_by) == 0:
        order_by += ['ufullpath || "/" || uname COLLATE NOCASE ' + ('DESC' if args.reverse else 'ASC')]

    if args.no_sort:
        order_by = []

    return order_by

# argv[0] should be the command name
def run(argv, config_path):
    # find and parse the configuration file first
    config = gufi_config.server_config(config_path)

    class FullTimeAction(argparse.Action):
        def __init__(self, option_strings, dest, nargs=None, **kwargs):
            super(FullTimeAction, self).__init__(option_strings, dest, 0, **kwargs)
        def __call__(self, parser, namespace, values, option_string=None):
            # --full-time
            #        like -l --time-style=full-iso
            setattr(namespace, 'long_listing', True)
            setattr(namespace, 'time_style', 'full-iso')

    # parse the arguments
    parser = argparse.ArgumentParser(description='GUFI version of ls', add_help=False)
    # override help to not use -h
    parser.add_argument('--help',                                                        action='help',                                    help='show this help message and exit')
    parser.add_argument('--version', '-v',                                               action='version',          version=os.path.basename(os.path.realpath(__file__)) + ' @GUFI_VERSION@')
    parser.add_argument('-a', '--all',                            dest='all',            action='store_true',                              help='do not ignore entries starting with .')
    parser.add_argument('-A', '--almost-all',                     dest='almost_all',     action='store_true',                              help='do not list implied . and ..')
    parser.add_argument('--block-size',                           dest='blocksize',      choices=SIZES,                                    help='with -l, scale sizes by SIZE when printing them')
    parser.add_argument('-B', '--ignore-backups',                 dest='ignore_backups', action='store_true',                              help='do not list implied entries ending with ~')
    parser.add_argument('--full-time',                            dest='full_time',      action=FullTimeAction,                            help='like -l --time-style=full-iso')
    parser.add_argument('-G', '--no-group',                       dest='no_group',       action='store_true',                              help='in a long listing, don\'t print group names')
    parser.add_argument('-h', '--human-readable',                 dest='human_readable', action='store_true',                              help='with -l and -s, print sizes like 1K 234M 2G etc.')
    parser.add_argument('-i', '--inode',                          dest='inode',          action='store_true',                              help='print the index number of each file')
    parser.add_argument('-l',                                     dest='long_listing',   action='store_true',                              help='use a long listing format')
    parser.add_argument('-r', '--reverse',                        dest='reverse',        action='store_true',                              help='reverse order while sorting')
    parser.add_argument('-R', '--recursive',                      dest='recursive',      action='store_true',                              help='list subdirectories recursively')
    parser.add_argument('-s', '--size',                           dest='size',           action='store_true',                              help='print the allocated size of each file, in blocks')
    parser.add_argument('-S',                                     dest='sort_largest',   action='store_true',                              help='sort by file size, largest first')
    parser.add_argument('--time-style',     metavar='TIME_STYLE', dest='time_style',                                                       help='time/date format with -l')
    parser.add_argument('-t',                                     dest='mtime',          action='store_true',                              help='sort by modification time, newest first')
    parser.add_argument('-U',                                     dest='no_sort',        action='store_true',                              help='do not sort; list entries in directory order')

    # for now, only 1 path is allowed
    parser.add_argument('paths',                                                         type=str, action='append' , nargs='*')

    # GUFI specific arguments
    parser.add_argument('--delim',          metavar='c',          dest='delim',          type=gufi_common.get_char, default=' ',           help='delimiter separating output columns')
    parser.add_argument('--output-buffer',  metavar='bytes',      dest='output_buffer',  type=gufi_common.get_non_negative, default=4096,  help='Size of each thread\'s output buffer')
    parser.add_argument('--in-memory-name', metavar='name',       dest='inmemory_name',  type=str,                          default='out', help='Name of in-memory database when -R is used')
    parser.add_argument('--nlink-width',    metavar='chars',      dest='nlink_width',    type=gufi_common.get_non_negative, default=2,     help='Width of nlink column')
    parser.add_argument('--size-width',     metavar='chars',      dest='size_width',     type=gufi_common.get_non_negative, default=10,    help='Width of size column')
    parser.add_argument('--user-width',     metavar='chars',      dest='user_width',     type=gufi_common.get_non_negative, default=5,     help='Width of user column')
    parser.add_argument('--group-width',    metavar='chars',      dest='group_width',    type=gufi_common.get_non_negative, default=5,     help='Width of group column')

    args = parser.parse_args(argv[1:]);

    # return code
    rc = 0

    # at least 1 argument
    if len(args.paths[0]) == 0:
        args.paths = [['']]

    for path in args.paths[0]:
        # prepend the provided paths with the GUFI index root
        fullpath = os.path.normpath(os.path.sep.join([config['IndexRoot'], path]))

        # create the base command
        query_cmd = [config['Exec']]

        # directory and non-directory paths are processed differently
        if os.path.isdir(fullpath):
            column_names = ['fullpath', 'name', 'type', 'inode', 'nlink', 'size',
                            'mode', 'uid', 'gid', 'blksize', 'blocks', 'mtime',
                            'atime', 'ctime', 'linkname', 'xattrs', 'pinode']

            I = 'CREATE TABLE {0} (fullpath TEXT, name TEXT, type TEXT, inode INT(64), nlink INT(64), size INT(64), mode INT(64), uid INT(64), gid INT(64), blksize INT(64), blocks INT(64), mtime INT(64), atime INT(64), ctime INT(64), linkname TEXT, xattrs TEXT, pinode INT(64));'.format(args.inmemory_name)

            J = 'INSERT INTO aggregate.{0} {1}'.format(args.inmemory_name,
                                                       gufi_common.build_query(['*'],
                                                                               [args.inmemory_name],
                                                                               None,
                                                                               None,
                                                                               None,
                                                                               None))
            if args.recursive:
                S = 'INSERT INTO {0} {1}'.format(args.inmemory_name,
                                                 gufi_common.build_query(['fpath()', '"" as name', 'type', 'inode', 'nlink', 'size',
                                                                          'mode', 'uid', 'gid', 'blksize', 'blocks', 'mtime',
                                                                          'atime', 'ctime', 'linkname', 'xattrs', 'pinode'],
                                                                         ['summary'],
                                                                         None,
                                                                         None,
                                                                         None,
                                                                         None))

                E = 'INSERT INTO {0} {1}'.format(args.inmemory_name,
                                                 gufi_common.build_query(['fpath()', 'name', 'type', 'inode', 'nlink', 'size',
                                                                          'mode', 'uid', 'gid', 'blksize', 'blocks', 'mtime',
                                                                          'atime', 'ctime', 'linkname', 'xattrs', 'pinode'],
                                                                         ['pentries'],
                                                                         None,
                                                                         None,
                                                                         None,
                                                                         None))

                # recursive select on pinode
                G = '''WITH RECURSIVE under ({1}) AS
                (
                         SELECT {2} FROM {0} WHERE inode=(SELECT inode FROM {0} WHERE fullpath=\"{3}\")
                             UNION ALL
                         SELECT {2} FROM {0} underm
                                     JOIN under ON
                                 underm.pinode=under.uinode
                )
                {4};'''.format(args.inmemory_name,
                               'u' + ', u'.join(column_names),
                               ', '.join(column_names),
                               fullpath,
                               gufi_common.build_query(build_recursive_select(args),
                                                       ['under'],
                                                       None,
                                                       None,
                                                       build_order_by_recursive(args),
                                                       None))

                query_cmd += ['-e', '0',
                              '-n', str(config['Threads']),
                              '-I', I,
                              '-S', S,
                              '-E', E,
                              '-J', J,
                              '-G', G,
                              '-a']

            else:
                S = 'INSERT INTO {0} {1}'.format(args.inmemory_name,
                                                 gufi_common.build_query(['fpath()', 'name', 'type', 'inode', 'nlink', 'size',
                                                                          'mode', 'uid', 'gid', 'blksize', 'blocks', 'mtime',
                                                                          'atime', 'ctime', 'linkname', 'xattrs', 'pinode'],
                                                                         ['summary'],
                                                                         ['level() == 1'],
                                                                         None,
                                                                         None,
                                                                         None))

                E = 'INSERT INTO {0} {1}'.format(args.inmemory_name,
                                                 gufi_common.build_query(['fpath()', 'name', 'type', 'inode', 'nlink', 'size',
                                                                          'mode', 'uid', 'gid', 'blksize', 'blocks', 'mtime',
                                                                          'atime', 'ctime', 'linkname', 'xattrs', 'pinode'],
                                                                         ['pentries'],
                                                                         ['level() == 0'],
                                                                         None,
                                                                         None,
                                                                         None))

                G = gufi_common.build_query(build_select(args),
                                            [args.inmemory_name],
                                            None,
                                            None,
                                            build_order_by(args),
                                            None)


                query_cmd += ['-e', '0',
                              '-n', str(config['Threads']),
                              '-I', I,
                              '-S', S,
                              '-E', E,
                              '-J', J,
                              '-G', G,
                              '-y', '0',
                              '-z', '1',
                              '-a']

        else:
            # if the path is not a directory, remove the last part of the path
            fullpath, match_name = os.path.split(fullpath)

            E = gufi_common.build_query(build_select(args),
                                        ['entries'],
                                        build_where(args, match_name) + ['level() == 0'],
                                        None,
                                        None,
                                        None)

            query_cmd += ['-e', '1',
                          '-n', str(config['Threads']),
                          '-E', E,
                          '-y', '0',
                          '-z', '0']

        if args.delim:
            query_cmd += ['-d', args.delim]

        if args.output_buffer:
            query_cmd += ['-B', str(args.output_buffer)]

        query = subprocess.Popen(query_cmd + [fullpath])
        query.communicate() # block until query finishes

        if query.returncode != 0:
            rc = 2

    return rc

if __name__=='__main__':
    sys.exit(run(sys.argv, gufi_config.DEFAULT_CONFIG_PATH))
