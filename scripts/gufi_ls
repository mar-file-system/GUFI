#!/usr/bin/env python2.7
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.


# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# -----
# NOTE:
# -----

# GUFI uses the C-Thread-Pool library.  The original version, written by
# Johan Hanssen Seferidis, is found at
# https://github.com/Pithikos/C-Thread-Pool/blob/master/LICENSE, and is
# released under the MIT License.  LANS, LLC added functionality to the
# original work.  The original work, plus LANS, LLC added functionality is
# found at https://github.com/jti-lanl/C-Thread-Pool, also under the MIT
# License.  The MIT License can be found at
# https://opensource.org/licenses/MIT.


# From Los Alamos National Security, LLC:
# LA-CC-15-039

# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.

# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



import argparse
import exceptions
import imp
import os
import subprocess
import sys

import gufi_common

gufi_config = imp.load_source('gufi_config', os.path.join(os.path.dirname(os.path.realpath(__file__)), 'gufi_config'))

def build_select(config, args):
    '''Build the SELECT portion of the query on the initial scan of entries'''
    select = []

    # ordering of concatenation matters

    if args.inode:
        select = ['inode'] + select

    if args.size:
        select += ['blocks']

    if args.long_listing:
        select += ['type', 'mode', 'nlink', 'uid']
        if not args.no_group:
            select += ['gid']
        select += ['size', 'mtime', ('(path() || "/" || name)' if args.recursive or (len(config['IndexRoot']) > 1) else 'name') + ' as fullpath', 'linkname']
    else:
        # at minimum, print the file name
        select += [('(path() || "/" ||  name)' if args.recursive or (len(config['IndexRoot']) > 1) else 'name') + ' as fullpath']

    return select


def build_aggregate_select(args):
    '''Build the SELECT portion of the query on the aggregate data'''
    select = []

    # ordering of concatenation matters

    if args.inode:
        select = ['inode'] + select

    if args.size:
        select += ['blocks']

    if args.long_listing:
        select += ['printf("%03o", mode)', 'nlink', 'uid']
        if not args.no_group:
            select += ['gid']
        select += ['size', 'strftime("%m %d %H:%M", mtime, "unixepoch")', 'case when (type == "l") then (fullpath' + ' || " -> " || linkname) else fullpath end']
    else:
        # at minimum, print the file name
        select += ['fullpath']

    return select


def build_where(args):
    '''Build the WHERE portion of the query'''
    where = []

    # everything
    if not args.all:
        where += ['fullpath REGEXP "^(?![\.]).*$"']

    # ignore . and ..
    elif args.almost_all:
        where += ['fullpath REGEXP "(?!(\.|\.\.))"']

    # ignore files that end with ~
    elif args.ignore_backups == True:
        where += ['fullpath REGEXP "^.*(?<![\~])$"']

    return where

def build_order_by(args):
    '''Build the ORDER BY portion of the query.'''
    order_by = []

    if args.reverse:
        order_by += ['fullpath DESC']

    if args.sort_largest:
        order_by += ['size DESC']

    if args.mtime:
        order_by += ['mtime DESC']

    if len(order_by) == 0:
        return ['fullpath ASC']

    if args.no_sort:
        order_by = []

    return order_by

if __name__=='__main__':
    # find and parse the configuration file first
    config = gufi_config.server_config(gufi_config.DEFAULT_CONFIG_PATH)

    # parse the arguments
    parser = argparse.ArgumentParser(description='GUFI version of ls', add_help=False)
    # override help to not use -h
    parser.add_argument('--help',                                                  action='help',                                    help='show this help message and exit')
    parser.add_argument('--version', '-v',                                         action='version',          version=os.path.basename(os.path.realpath(__file__)) + ' @GUFI_VERSION@')
    parser.add_argument('-a', '--all',                      dest='all',            action='store_true',                              help='do not ignore entries starting with .')
    parser.add_argument('-A', '--almost-all',               dest='almost_all',     action='store_true',                              help='do not list implied . and ..')
    parser.add_argument('-B', '--ignore-backups',           dest='ignore_backups', action='store_true',                              help='do not list implied entries ending with ~')
    parser.add_argument('-G', '--no-group',                 dest='no_group',       action='store_true',                              help='in a long listing, don\'t print group names')
    parser.add_argument('-i', '--inode',                    dest='inode',          action='store_true',                              help='print the index number of each file')
    parser.add_argument('-l',                               dest='long_listing',   action='store_true',                              help='use a long listing format')
    parser.add_argument('-r', '--reverse',                  dest='reverse',        action='store_true',                              help='reverse order while sorting')
    parser.add_argument('-R', '--recursive',                dest='recursive',      action='store_true',                              help='list subdirectories recursively')
    parser.add_argument('-s', '--size',                     dest='size',           action='store_true',                              help='print the allocated size of each file, in blocks')
    parser.add_argument('-S',                               dest='sort_largest',   action='store_true',                              help='sort by file size, largest first')
    parser.add_argument('-t',                               dest='mtime',          action='store_true',                              help='sort by modification time, newest first')
    parser.add_argument('-U',                               dest='no_sort',        action='store_true',                              help='do not sort; list entries in directory order')

    parser.add_argument('FILE',                                                    type=str, action='append', nargs='*')

    # GUFI specific arguments
    parser.add_argument('--delim',         metavar='c',     dest='delim',          type=gufi_common.get_char, default=' ',           help='delimiter separating output columns')
    parser.add_argument('--num_results',   metavar='n',     dest='num_results',    type=gufi_common.get_non_negative,                help='first n results')
    parser.add_argument('--output',                         dest='output',         type=str,                                         help='Output file prefix (Creates file <output>.tid)')
    parser.add_argument('--output-buffer', metavar='bytes', dest='output_buffer',  type=gufi_common.get_positive,      default=4096, help='Size of each thread\'s output buffer')

    args = parser.parse_args();

    # default to IndexRoot
    args.FILE = args.FILE[0]
    if len(args.FILE) == 0:
        args.FILE = ['']

    # prepend the provided paths with the GUFI root path
    args.FILE = [os.path.sep.join([config['IndexRoot'], path]) for path in args.FILE]

    where = build_where(args)
    order_by = build_order_by(args)

    first_query = gufi_common.build_query(build_select(config, args),
                                          ['entries'],
                                          where,
                                          None,
                                          order_by,
                                          args.num_results)
    second_query = gufi_common.build_query(build_aggregate_select(args),
                                           ['entries'],
                                           where,
                                           None,
                                           order_by,
                                           args.num_results)

    # create the query command
    query_cmd = [config['Exec'],
                 '-e', str(int(args.recursive)),
                 '-n', str(config['Threads']),
                 '-E', first_query,
                 '-J', 'SELECT * FROM entries;',
                 '-G', second_query,
                 '-z', '-1' if args.recursive else '1']

    if args.delim:
        query_cmd += ['-d', args.delim]

    if args.output:
        query_cmd += ['-o', args.output]

    if args.output_buffer:
        query_cmd += ['-B', str(args.output_buffer)]

    query = subprocess.Popen(query_cmd + args.FILE)
    query.communicate() # block until query finishes

    sys.exit(query.returncode)
