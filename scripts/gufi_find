#!/usr/bin/env python2.7
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.


# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# -----
# NOTE:
# -----

# GUFI uses the C-Thread-Pool library.  The original version, written by
# Johan Hanssen Seferidis, is found at
# https://github.com/Pithikos/C-Thread-Pool/blob/master/LICENSE, and is
# released under the MIT License.  LANS, LLC added functionality to the
# original work.  The original work, plus LANS, LLC added functionality is
# found at https://github.com/jti-lanl/C-Thread-Pool, also under the MIT
# License.  The MIT License can be found at
# https://opensource.org/licenses/MIT.


# From Los Alamos National Security, LLC:
# LA-CC-15-039

# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.

# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



import argparse
import exceptions
import os
import subprocess
import sys
import time

import gufi_common
import gufi_config

# location of this file
PATH = os.path.realpath(__file__)

SECONDS_PER_DAY = str(24 * 60 * 60)

'''file size units specified in GNU find.'''
filesize = {'b' : 512,
            'c' : 1,
            'w' : 2,
            'k' : 1024,
            'M' : 1048576,
            'G' : 1073741824}

def validate_args(args):
    '''Validate known arguments here'''

    # GUFI directories do not have source tree size/timestamps
    if args.type:
        if 'd' in args.type:
            if args.size or args.atime or args.mtime or args.ctime:
                raise exceptions.RuntimeError('size, atime, mtime, and ctime cannot be used with -type d')

def parse_size(size):
    prefix = None
    if size[0] == '+' or size[0] == '-':
        prefix = size[0]
        size = size[1:]

    unit = 'b'
    if size[-1] in filesize:
        unit = size[-1]
        size = size[:-1]

    # compute the actual size
    size = int(size) * filesize[unit]
    return prefix, size

def build_select(args):
    '''Build the SELECT portion of the queries for the treesummary, summary, and entries tables.'''
    tsummary = []
    summary  = []
    entries  = []

    # select must exist
    if args.select == None:
        # args.select = [['id', 'path() || "/" || name', 'type',
        #                 'inode', 'mode', 'nlink', 'uid', 'gid',
        #                 'size', 'blksize', 'blocks', 'atime',
        #                 'mtime', 'ctime', 'linkname', 'xattrs',
        #                 'crtime', 'ossint1', 'ossint2', 'ossint3',
        #                 'ossint4', 'osstext1', 'osstext2', 'pinode']]
        if args.type != 'd':
            args.select = [['path() || "/" || name']]
        else:
            args.select = [['path()']]

    select = []
    for columns in args.select:
        select += columns

    entries += [','.join(select)]

    return tsummary, summary, entries

def build_where(args, root_uid = 0, root_gid = 0):
    '''Build the WHERE portion of the queries for the treesummary, summary, and entries tables.'''
    tsummary = []
    summary  = []
    entries  = []

    now = time.time()

    # if not ((os.geteuid() == root_uid) or (os.getegid() == root_gid)):
    #     entries  += ['(uid == {})'.format(os.getuid())]
    #     # entries  += ['(uid == {}) OR (gid in {})'.format(os.getuid(), '(' + str(os.getgroups())[1:-1] + ')')]

    if args.amin is not None:
        entries += ['({} - atime) / 60 == {}'.format(now, args.amin)]

    # if args.anewer is not None:

    if args.atime is not None:
        entries += ['({} - atime) / {} == {} '.format(now, SECONDS_PER_DAY, args.atime)]

    if args.cmin is not None:
        entries += ['({} - ctime) / 60 == {}'.format(now, args.cmin)]

    # if args.cnewer is not None:

    if args.ctime is not None:
        entries += ['({} - ctime) / {} == {} '.format(now, SECONDS_PER_DAY, args.ctime)]

    if args.empty == True:
        summary += ['minsize == 0']
        entries += ['size == 0', '(type == \'f\') OR (type == \'d\')']

    if args.executable == True:
        entries += ['(mode & 64) == 64'] # 0100 have to use decimal or hexadecimal value because sqlite3 doesn't support octal

    if args.false == True:
        summary += ['0']
        entries += ['0']

    if args.gid is not None:
        summary += ['mingid <= {}'.format(args.gid), '{} <= maxgid'.format(args.gid)]
        entries += ['gid == {}'.format(args.gid)]

    if args.group is not None:
        entries += ['gid == {}'.format(args.group)]

    # if args.ilname is not None:

    if args.iname is not None:
        entries += ['name REGEXP \'(?i){}\'"'.format(args.iname)]

    if args.inum is not None:
        entries += ['inode == {}'.format(args.inum)]

    # Behaves in the same way as -iwholename. This option is deprecated, so please do not use it.
    # if args.ipath is not None:

    # if args.iregex is not None:

    # if args.iwholename is not None:

    if args.links is not None:
        entries += ['nlink == {}'.format(args.links)]

    if args.lname is not None:
        entries += ['type == \'f\'', 'linkname REGEXP \'(?i){}\'"'.format(args.lname)]

    if args.mmin is not None:
        entries += ['({} - mtime) / 60 == {}'.format(now, args.mmin)]

    if args.mtime is not None:
        if len(args.mtime) > 2:
            raise exceptions.Exception('Up to 2 -mtime flags can be provided. Got {}.'.format(len(args.mtime)))

        for mtime in args.mtime:
            comp = '=='

            if mtime[0] == '-':
                comp = '<'
                mtime = mtime[1:]
            elif mtime[0] == '+':
                comp = '>'
                mtime = mtime[1:]

            entries += ['({} - mtime) / {} {} {}'.format(now, SECONDS_PER_DAY, comp, mtime)]

    if args.name is not None:
        entries += [' OR '.join(['(name REGEXP \'{}\')'.format(name) for name in args.name])]

    if args.newer is not None:
        entries += ['mtime > {}'.format(args.newer.st_mtime)]

    # if args.newerXY is not None:

    # if args.nouser == True:

    # # not handled here
    # if args.path is not None:

    # if args.perm is not None:

    if args.readable == True:
        entries += ['(mode & 256) == 256'] # 0400 have to use decimal or hexadecimal value because sqlite3 doesn't support octal

    # # not handled here
    # if args.regex is not None:

    if args.samefile is not None:
        entries += ['inode == {}'.format(args.samefile.st_ino)]

    if args.size is not None:
        if len(args.size) == 1:
            prefix, size = parse_size(args.size[0])

            # (size - x%, size + x%)
            # the prefix is ignored
            if args.size_percent_range is not None:
                percent_range = sorted(args.size_percent_range)
                lower = size + size * percent_range[0] / 100.0
                higher = size + size * percent_range[1] / 100.0
                entries += ['{} < size'.format(lower), 'size <= {}'.format(higher)]
            # size <=/=/>= x
            else:
                comp = '=='
                if prefix == '+':
                    summary += ['minsize => {}'.format(size)]
                    comp = '>'
                elif prefix == '-':
                    summary += ['maxsize <= {}'.format(size)]
                    comp = '<'

                entries += ['size {} {}'.format(comp, size)]
        # if there are multiple sizes, do not process args.size_percent_range
        elif len(args.size) == 2:
            if args.size_percent_range is not None:
                sys.stderr.write("Ignoring --size%\n")

            for size_str in args.size:
                prefix, size = parse_size(size_str)

                comp = '=='
                if prefix == '+':
                    summary += ['minsize => {}'.format(size)]
                    comp = '>'
                elif prefix == '-':
                    summary += ['maxsize <= {}'.format(size)]
                    comp = '<'

                entries += ['size {} {}'.format(comp, size)]
        else:
            raise exceptions.Exception('Up to 2 -size flags can be provided. Got {}: {}.'.format(len(args.size), args.size))

    if args.true == True:
        summary += ['1']
        entries += ['1']

    if args.type is not None:
        entries += ['(type == "{}")'.format(args.type)]

    if args.uid is not None:
        summary += ['minuid <= {}'.format(args.uid), '{} <= maxuid'.format(args.uid)]
        entries += [' OR '.join(['(uid == {})'.format(uid) for uid in args.uid])]

    # if args.used is not None:

    if args.user is not None:
        entries += ['uid == {}'.format(args.user)]

    # if args.wholename is not None:

    if args.writable == True:
        entries += ['(mode & 128) == 128'] # 0200 have to use decimal or hexadecimal value because sqlite3 doesn't support octal

    # if args.xtype is not None:

    # if args.context is not None:

    return tsummary, summary, entries

def build_group_by(args):
    '''Build the GROUP BY portion of the queries for the treesummary, summary, and entries tables.'''
    tsummary = []
    summary  = []
    entries  = []

    if args.group_by:
        group_by = []
        for columns in args.group_by:
            group_by += columns

        entries += [','.join(group_by)]

    return tsummary, summary, entries

def build_order_by(args):
    '''Build the ORDER BY portion of the queries for the treesummary, summary, and entries tables.'''
    tsummary = []
    summary  = []
    entries  = []

    if args.smallest:
        entries += ['size ASC']

    if args.largest:
        entries += ['size DESC']

    return tsummary, summary, entries

def help(parser):
    # generate list of expressions
    expr = [expr for expr in sorted(parser.parse_args([]).__dict__.keys())]
    expr = [expr[i:i+5] for i in xrange(0, len(expr), 5)]

    print ('Usage: gufi_find [-P] [path...] [expression]\n' +
           '\n' +
           'default path is the current directory;\n' +
           'expression may consist of:\n' +
           '\n' +
           '\n'.join(['    ' + ' '.join(row) for row in expr]) + '\n' +
           '\n' +
           'Report (and track progress on fixing) bugs to the GitHub Issues\n' +
           'page at https://github.com/mar-file-system/GUFI/issues\n')

    exit(0)

def build_expression_parser():
    # parse the arguments
    parser = argparse.ArgumentParser(description='GUFI version of find', add_help=False)

    # override help to not use -h
    parser.add_argument('-help', '--help',                                                         action='store_true',                                help='Print a summary of the command-line usage of find and exit.')

    parser.add_argument('--version', '-v',                                                         action='version',                                   version=os.path.basename(PATH) + ' @GUFI_VERSION@')

    # GNU find options
    parser.add_argument('-amin',               metavar='n',          dest='amin',                  type=gufi_common.get_non_negative,                  help='File was last accessed n minutes ago.')
    # parser.add_argument('-anewer',             metavar='file',       dest='anewer',                type=gufi_common.get_non_negative,                  help='File was last accessed more recently than file was modified.')
    parser.add_argument('-atime',              metavar='n',          dest='atime',                 type=gufi_common.get_non_negative,                  help='File was last accessed n*24 hours ago.')
    parser.add_argument('-cmin',               metavar='n',          dest='cmin',                  type=gufi_common.get_non_negative,                  help='File\'s status was last changed n minutes ago.')
    # parser.add_argument('-cnewer',             metavar='file',       dest='cnewer',                type=gufi_common.get_non_negative,                  help='File\'s status was last changed more recently than file was modified.')
    parser.add_argument('-ctime',              metavar='n',          dest='ctime',                 type=gufi_common.get_non_negative,                  help='File\'s status was last changed n*24 hours ago.')
    parser.add_argument('-empty',                                    dest='empty',                 action='store_true',                                help='File is empty and is either a regular file or a directory.')
    parser.add_argument('-executable',                               dest='executable',            action='store_true',                                help='Matches files which are executable and directories which are searchable (in a file name resolution sense).')
    parser.add_argument('-false',                                    dest='false',                 action='store_true',                                help='File is false and is either a regular file or a directory.')
    # parser.add_argument('-fstype',             metavar='n',          dest='fstype',                type=str,                                           help='File is on a filesystem of type type.')
    parser.add_argument('-gid',                metavar='n',          dest='gid',                   type=gufi_common.get_gid,                           help='File\'s numeric group ID is n.')
    parser.add_argument('-group',              metavar='gname',      dest='group',                 type=gufi_common.get_group,                         help='File belongs to group gname (numeric group ID allowed).')
    # parser.add_argument('-ilname',             metavar='pattern',    dest='ilname',                type=str,                                           help='Like -lname, but the match is case insensitive.')
    parser.add_argument('-iname',              metavar='pattern',    dest='iname',                 type=str,                                           help='Like -name, but the match is case insensitive.')
    parser.add_argument('-inum',               metavar='n',          dest='inum',                  type=gufi_common.get_non_negative,                  help='File has inode number n. It is normally easier to use the -samefile test instead.')
    # parser.add_argument('-ipath',              metavar='pattern',    dest='ipath',                 type=str,                                           help='Behaves in the same way as -iwholename. This option is deprecated, so please do not use it.')
    # parser.add_argument('-iregex',             metavar='pattern',    dest='iregex',                type=str,                                           help='Like -regex, but the match is case insensitive.')
    # parser.add_argument('-iwholename',         metavar='pattern',    dest='iwholename',            type=str,                                           help='Like -wholename, but the match is case insensitive.')
    parser.add_argument('-links',              metavar='n',          dest='links',                 type=gufi_common.get_non_negative,                  help='File has n links.')
    parser.add_argument('-lname',              metavar='pattern',    dest='lname' ,                type=str,                                           help='File is a symbolic link whose contents match shell pattern pattern.')
    parser.add_argument('-mmin',               metavar='n',          dest='mmin',                  type=gufi_common.get_non_negative,                  help='File\'s data was last modified n minutes ago.')
    parser.add_argument('-mtime',              metavar='n',          dest='mtime',                 type=gufi_common.get_non_negative,                  help='File\'s data was last modified n*24 hours ago.')
    parser.add_argument('-name',               metavar='pattern',    dest='name',                  type=str, action='append',                          help='Base of file name (the path with the leading directories removed) matches shell pattern pattern.')
    parser.add_argument('-newer',              metavar='file',       dest='newer',                 type=os.stat,                                       help='File was modified more recently than file.')
    # parser.add_argument('-newerXY',            metavar='reference',  dest='newerXY',               type=str,                                           help='Compares the timestamp of the current file with reference.')
    # parser.add_argument('-nouser',                                   dest='nouser',                type='store_true',                                  help='No user corresponds to file\'s numeric user ID.')
    parser.add_argument('-path',               metavar='pattern',    dest='path',                  type=str, action='append', default=[],              help='File name matches shell pattern pattern.')
    # parser.add_argument('-perm',               metavar='mode',       dest='perm',                  type=str,                                           help='File\'s  permission bits')
    parser.add_argument('-readable',                                 dest='readable',              action='store_true',                                help='Matches files which are readable.')
    # parser.add_argument('-regex',              metavar='pattern',    dest='regex',                 type=str,                                           help='File name matches regular expression pattern.')
    parser.add_argument('-samefile',           metavar='name',       dest='samefile',              type=os.stat,                                       help='File refers to the same inode as name.')
    parser.add_argument('-size',               metavar='n',          dest='size', action='append', type=gufi_common.get_size,                          help='')
    parser.add_argument('-true',                                     dest='true',                  action='store_true',                                help='Always true')
    parser.add_argument('-type',               metavar='c',          dest='type',                  type=gufi_common.get_char,                          help='File is of type c')
    parser.add_argument('-uid',                metavar='n',          dest='uid',                   type=gufi_common.get_uid,  action='append',         help='File\'s numeric user ID is n.')
    # parser.add_argument('-used',               metavar='n',          dest='used',                  type=gufi_common.get_non_negative,                  help='File was last accessed n days after its status was last changed.')
    parser.add_argument('-user',               metavar='uname',      dest='user',                  type=gufi_common.get_user,                          help='File is owned by user uname (numeric user ID allowed).')
    # parser.add_argument('-wholename',          metavar='pattern',    dest='wholename',             type=str, action='append', default=[],              help='See -path. This alternative is less portable than -path.')
    parser.add_argument('-writable',                                 dest='writable',              action='store_true',                                help='Matches files which are writable.')
    # parser.add_argument('-xtype',              metavar='c',          dest='xtype',                 type=gufi_common.get_char,                          help='The same as -type unless the file is a symbolic link.')
    # parser.add_argument('-context',            metavar='pattern',    dest='context',               type=str,                                           help='(SELinux only) Security context of the file matches glob pattern.')

    parser.add_argument('-maxdepth',           metavar='levels',     dest='maxdepth',              type=gufi_common.get_non_negative,                  help='Descend at most levels (a non-negative integer) levels of directories below the command line arguments. -maxdepth 0 means only apply the tests and actions to the command line arguments.')
    parser.add_argument('-mindepth',           metavar='levels',     dest='mindepth',              type=gufi_common.get_non_negative,                  help='Do not apply any tests or actions at levels less than levels (a non-negative integer). -mindepth 1 means process all files except the command line arguments.')
    parser.add_argument('-fprint',             metavar='file',       dest='fprint',                type=str,                                           help='Output file prefix (Creates file <output>.tid)')

    # GUFI specific arguments
    parser.add_argument('--select',            metavar='cols',       dest='select',                action='append', nargs='*',                         help='comma separated columns (default: *)')
    parser.add_argument('--group_by',          metavar='cols',       dest='group_by',              type=str,                                           help='comma separated columns (default: None)')
    parser.add_argument('--delim',             metavar='c',          dest='delim',                 type=gufi_common.get_char, default=' ',             help='delimiter separating output columns')
    parser.add_argument('--size%',             metavar='n',          dest='size_percent_range',    type=float, nargs=2,                                help='Modifier to the -size flag. Expects 2 values that define the min and max percentage from the size.')
    parser.add_argument('--num_results',       metavar='n',          dest='num_results',           type=gufi_common.get_non_negative,                  help='first n results')
    parser.add_argument('--smallest',                                dest='smallest',              action='store_true',                                help='top n smallest files')
    parser.add_argument('--largest',                                 dest='largest',               action='store_true',                                help='top n largest files')
    parser.add_argument('--aggregate',                               dest='aggregate',             action='store_true',                                help='Aggregate results before printing')
    parser.add_argument('--output-buffer',     metavar='bytes',      dest='output_buffer',         type=gufi_common.get_positive, default=4096,        help='Size of each thread\'s output buffer')
    # parser.add_argument('--path-index',        metavar='i',          dest='path_index',            type=gufi_common.get_non_negative,                  help='Use one of the provided paths')
    parser.add_argument('--read-write',                              dest='readwrite',             action='store_true',                                help='Open databases in read-write mode')
    return parser

if __name__=='__main__':
    # find and parse the configuration file first
    config = gufi_config.server_config(gufi_config.DEFAULT_CONFIG_PATH)

    expression_parser = build_expression_parser()

    i = 1
    at_expressions = False # whether or not the command line arguments started with expressions

    # parse 'real' options
    # none are actually handled
    real = {
        # 'H': False,
        # 'L': False,
        'P': True,
        # 'D': False, # don't even handle here
        # 'O': False, # don't even handle here
    }
    while (i < len(sys.argv)) and (sys.argv[i][0] == '-'):
        if '-help' in sys.argv[i]:
            help(expression_parser)

        # must be separate arguments
        # if any flags are not H, L, or P, immediately treat the rest of the flags as expression flags
        if sys.argv[i][1:] not in ['H', 'L', 'P']:
            at_expressions = True
            break

        if sys.argv[i][1:] in ['H', 'L']:
            sys.stderr.write('Found flag {}. Ignoring.\n'.format(sys.argv[i][1:]))
        else:
            real[sys.argv[i][1:]] = True

        i += 1

    if at_expressions and (sys.argv[i][0] != '-'):
        raise exceptions.RuntimeError('gufi_find: paths must preceed expression: {}'.format(sys.argv[i - 1]))

    # parse paths
    paths = []
    while (i < len(sys.argv)) and (sys.argv[i][0] != '-'):
        paths += [sys.argv[i]]
        i += 1
    if len(paths) == 0:
        paths = ['']

    # prepend the provided paths with the GUFI root path
    paths = [os.path.normpath(os.path.sep.join([config['IndexRoot'], path])) for path in paths]

    # parse expressions without the 'real' and path arguments
    args, unknown = expression_parser.parse_known_args(sys.argv[i:])

    if args.help:
        help(expression_parser)

    if len(unknown):
        raise exceptions.RuntimeError('gufi_find: unknown predicate `{}\''.format(unknown[0]))

    validate_args(args)

    # generate the queries
    tsummary_select,   summary_select,   entries_select   = build_select(args)
    tsummary_where,    summary_where,    entries_where    = build_where(args)
    tsummary_group_by, summary_group_by, entries_group_by = build_group_by(args)
    tsummary_order_by, summary_order_by, entries_order_by = build_order_by(args)

    tsummary = gufi_common.build_query(tsummary_select,
                                       ['treesummary'],
                                       tsummary_where,
                                       tsummary_group_by,
                                       tsummary_order_by,
                                       args.num_results)

    summary = gufi_common.build_query(summary_select,
                                      ['summary'],
                                      summary_where,
                                      summary_group_by,
                                      summary_order_by,
                                      args.num_results)

    initial = gufi_common.build_query(entries_select,
                                      ['summary' if args.type == 'd' else 'entries'],
                                      entries_where,
                                      entries_group_by,
                                      entries_order_by,
                                      args.num_results)

    intermediate = final = gufi_common.build_query(['*'],
                                                   ['entries'],
                                                   entries_where,
                                                   entries_group_by,
                                                   entries_order_by,
                                                   args.num_results)

    # create the query command
    query_cmd = [config['Exec'],
                 '-e', str(int(not args.aggregate)),
                 '-n', str(config['Threads'])]

    # if len(tsummary):
    #     query_cmd += ['-T', tsummary]

    # if len(summary):
    #     query_cmd += ['-S', summary]

    if len(initial):
        query_cmd += ['-E', initial]

    if args.aggregate and len(intermediate):
        query_cmd += ['-J', intermediate]

    if args.aggregate and len(final):
        query_cmd += ['-G', final]

    if args.delim:
        query_cmd += ['-d', args.delim]

    if args.maxdepth:
        query_cmd += ['-z', str(args.maxdepth)]

    if args.mindepth:
        query_cmd += ['-y', str(args.mindepth)]

    if args.fprint:
        query_cmd += ['-o', args.fprint]

    if args.output_buffer:
        query_cmd += ['-B', str(args.output_buffer)]

    if args.readwrite:
        query_cmd += ['-w']

    query = subprocess.Popen(query_cmd + paths) # positional arguments must appear after flags
    query.communicate()                         # block until query finishes

    sys.exit(query.returncode)
