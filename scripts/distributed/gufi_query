#!@Python3_EXECUTABLE@
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



import gufi_common
import gufi_distributed

SQL_FLAGS = 'ITSEKJGF'

def add_sql(args):
    cmd = []

    for flag in SQL_FLAGS:
        if hasattr(args, flag):
            value = getattr(args, flag)
            if value:
                cmd += ['-{0}'.format(flag), value]

    return cmd

def subtree_cmd(args, filename, idx, target):
    cmd = [
        args.gufi_query,
        '--threads', str(args.threads),
        '--delim', str(args.delim),
        '--min-level', str(args.level),
        '--subtree-list', filename,
    ]

    if args.distributor == 'ssh':
        cmd += ['-o', '{0}.{1}.{2}'.format(args.output_prefix, target, idx)]

    cmd += add_sql(args) + [args.GUFI_tree]

    return cmd

def top_cmd(args, target):
    cmd = [
        args.gufi_query,
        '--threads', str(args.threads),
        '--delim', str(args.delim),
        '--max-level', str(args.level - 1),
    ]

    if args.distributor == 'ssh':
        cmd += ['-o', '{0}.{1}.top'.format(args.output_prefix, target)]

    cmd += add_sql(args) + [args.GUFI_tree]

    return cmd

def parse_args():
    parser = gufi_distributed.parse_args('gufi_query_distributed',
                                         'Script for distributing gufi_query across nodes')

    parser.add_argument('--gufi_query',          metavar='path',
                        type=gufi_distributed.is_exec_file,
                        default='gufi_query')

    parser.add_argument('--delim',   '-d',  metavar='c',
                        type=gufi_common.get_char,
                        default=b'\x1e')

    for flag in SQL_FLAGS:
        parser.add_argument('-{0}'.format(flag), metavar='SQL', type=str)

    # required when using ssh
    parser.add_argument('--output_prefix', '-o',
                        type=str,
                        help='prefix of text files used to store output when using ssh')

    parser.add_argument('GUFI_tree',
                        type=gufi_distributed.dir_arg)

    return parser.parse_args()

def main():
    args = parse_args()

    if (args.distributor == 'ssh') and not args.output_prefix:
        raise RuntimeError('--output_prefix must be set')

    jobids = gufi_distributed.distribute_work(args, args.GUFI_tree, subtree_cmd, top_cmd, False)

    if args.distributor == 'slurm':
        print('cat the following slurm job output files to get complete results:')
        for jobid in jobids:
            print('    {0}'.format(jobid))
    elif args.distributor == 'ssh':
        print('cat "{0}.*" to get complete results'.format(args.output_prefix))

if __name__ == '__main__':
    main()
