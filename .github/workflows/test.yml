# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.
#
#
# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# From Los Alamos National Security, LLC:
# LA-CC-15-039
#
# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.
#
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



name: Core Tests

on: [push, pull_request]

env:
  CC: clang
  CXX: clang++
  DEP_INSTALL_PREFIX: ~/.local
  COMMON_CONFIG: -DCMAKE_C_FLAGS="-Wall -Wextra -Werror -Wpedantic" -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror -Wpedantic" -DDEP_INSTALL_PREFIX="${DEP_INSTALL_PREFIX}" -DDEP_BUILD_THREADS=2 -DENABLE_SUDO_TESTS=On -DCLIENT=On
  PIP_BREAK_SYSTEM_PACKAGES: 1

jobs:
  Linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        img: [ "almalinux:latest", "alpine:edge", "centos:8", "rockylinux:8", "rockylinux:9", "ubuntu:22.04", "ubuntu:24.04" ]
      fail-fast: true
    container:
      image: ${{ matrix.img }}
    steps:
    - uses: actions/checkout@v4

    - name: GNU tar for Alpine Linux caching
      if:   matrix.img == 'alpine:edge'
      run:  |
        apk update

        # install GNU tar for actions/cache
        # https://stackoverflow.com/a/64187955/341683
        apk add --no-cache tar

    - uses: actions/cache@v4
      with:
        path: ${{ env.DEP_INSTALL_PREFIX }}
        key:  ${{ runner.os }}-${{ matrix.img }}

    - name: AlmaLinux Prerequisites
      if:   startsWith(matrix.img, 'almalinux:')
      run:  contrib/CI/almalinux.sh

    - name: Alpine Linux Edge Prerequisites
      if:   matrix.img == 'alpine:edge'
      run:  contrib/CI/alpine.sh

    - name: CentOS 8 Prerequisites
      if:   matrix.img == 'centos:8'
      run:  contrib/CI/centos8.sh

    - name: Rocky Linux Prerequisites
      if:   startsWith(matrix.img, 'rockylinux:')
      run:  contrib/CI/rockylinux.sh

    - name: Ubuntu Prerequisites
      if:   startsWith(matrix.img, 'ubuntu:')
      run:  contrib/CI/ubuntu.sh

    - name: Install Python Packages
      run:  python3 -m pip install -r contrib/CI/requirements.txt

    - name: Configure CMake
      if:   matrix.img == 'rockylinux:8'
      run:  cmake -B ${{ github.workspace }}/build ${{ env.COMMON_CONFIG }} -DPython3_EXECUTABLE="$(which python3)"

    - name: Configure CMake
      if:   matrix.img != 'rockylinux:8'
      run:  cmake -B ${{ github.workspace }}/build ${{ env.COMMON_CONFIG }}

    - name: Build
      run:  cmake --build ${{ github.workspace }}/build -j

    - name: Test
      run:  |
            cd ${{ github.workspace }}/build
            ctest --output-on-failure

  macOS:
    strategy:
      matrix:
        os: [ "macos-15" ]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - uses: actions/cache@v4
      with:
        path: ${{ env.DEP_INSTALL_PREFIX }}
        key:  ${{ matrix.os }}

    - name: macOS Prerequisites
      run:  contrib/CI/macos.sh

    - name: Install Python Packages
      run:  python3 -m pip install -r contrib/CI/requirements.txt

    - name: Configure CMake
      run:  CC="$(brew --prefix llvm)/bin/clang" CXX="$(brew --prefix llvm)/bin/clang++" cmake -B ${{ github.workspace }}/build ${{ env.COMMON_CONFIG }} -DCMAKE_OSX_SYSROOT=macosx -DOpenMP_C_LIB_NAMES="libomp" -DOpenMP_C_FLAGS="-fopenmp" -DOpenMP_C_INCLUDE_DIRS="$(brew --prefix libomp)/include" -DOpenMP_libomp_LIBRARY="$(brew --prefix libomp)/lib/libomp.dylib"

    - name: Build
      run:  cmake --build ${{ github.workspace }}/build -j

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run:  ctest --output-on-failure

  Windows:
    runs-on: windows-latest
    name: Windows (cygwin)
    steps:
    - run: git config --global core.autocrlf input

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - uses: actions/cache@v4
      with:
        path: D:\cygwin
        key:  ${{ runner.os }}-cygwin

    - name: Install Cygwin
      uses: cygwin/cygwin-install-action@master
      with:
        packages: attr autoconf clang cmake git libattr1 libiconv-devel libintl-devel libpcre2-devel make patch pkg-config python3 python39 python39-pip python39-sqlalchemy zlib-devel

    - name: Set Up Python3
      run:  ln -sf /usr/bin/python3.9 /usr/bin/python3

    - name: Install Python Packages
      run:  python3 -m pip install -r contrib/CI/requirements.txt

    - name: Set Up Git
      run: >-
           export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 &&
           git config --global --add safe.directory '*'
      shell: "C:\\cygwin\\bin\\bash.exe -o igncr -eo pipefail {0}"

    - name: Configure CMake
      run: >-
           export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 &&
           cmake . -B build -DCMAKE_C_FLAGS="-Wall -Wextra -Werror -Wpedantic" -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror -Wpedantic" -DDEP_INSTALL_PREFIX="/usr/local" -DDEP_BUILD_THREADS=2 -DDEP_USE_JEMALLOC=Off
      shell: "C:\\cygwin\\bin\\bash.exe -o igncr -eo pipefail {0}"

    - name: Build
      run:  >-
            export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 &&
            cmake --build build
      shell: "C:\\cygwin\\bin\\bash.exe -o igncr -eo pipefail {0}"

    - name: Test
      run:  >-
            export PATH=/usr/bin:$(cygpath ${SYSTEMROOT})/system32 &&
            ctest --output-on-failure --test-dir build
      shell: "C:\\cygwin\\bin\\bash.exe -o igncr -eo pipefail {0}"
