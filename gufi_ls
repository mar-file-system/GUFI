#!/usr/bin/env python2
# This file is part of GUFI, which is part of MarFS, which is released
# under the BSD license.


# Copyright (c) 2017, Los Alamos National Security (LANS), LLC
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# -----
# NOTE:
# -----

# GUFI uses the C-Thread-Pool library.  The original version, written by
# Johan Hanssen Seferidis, is found at
# https://github.com/Pithikos/C-Thread-Pool/blob/master/LICENSE, and is
# released under the MIT License.  LANS, LLC added functionality to the
# original work.  The original work, plus LANS, LLC added functionality is
# found at https://github.com/jti-lanl/C-Thread-Pool, also under the MIT
# License.  The MIT License can be found at
# https://opensource.org/licenses/MIT.


# From Los Alamos National Security, LLC:
# LA-CC-15-039

# Copyright (c) 2017, Los Alamos National Security, LLC All rights reserved.
# Copyright 2017. Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use,
# reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS
# ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
# ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is
# modified to produce derivative works, such modified software should be
# clearly marked, so as not to confuse it with the version available from
# LANL.

# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.



import argparse
import os
import subprocess
import sys

import query_builder as qb

def build_select(args):
    '''Build the SELECT portion of the query'''
    select = []

    # ordering of concatenation matters

    if args.inode:
        select = ['inode'] + select

    if args.size:
        select += ['blocks']

    if args.long_listing:
        select += ['type', 'mode', 'nlink', 'uid']
        if args.no_group == False:
            select += ['gid']
        select += ['size', 'mtime', 'name', 'linkname']
    else:
        # at minimum, print the file name
        select += ['name']

    return select

def build_aggregate_select(args):
    '''Build the SELECT portion of the query on the aggregate data'''
    select = []

    # ordering of concatenation matters

    if args.inode:
        select = ['inode'] + select

    if args.size:
        select += ['blocks']

    if args.long_listing:
        select += ['printf("%03o", mode)', 'nlink', 'uid']
        if args.no_group == False:
            select += ['gid']
        select += ['size', 'strftime("%m %d %H:%M", mtime, "unixepoch")', 'case when (type == "l") then (name || " -> " || linkname) else name end']
    else:
        # at minimum, print the file name
        select += ['name']

    return select

def build_where(args):
    '''Build the WHERE portion of the query'''
    where = []

    if args.all == False:
        where += ['name REGEXP "^(?![\.]).*$"']

    if args.ignore_backups == True:
        where += ['name REGEXP "^.*(?<![\~])$"']

    return where

def build_order_by(args):
    '''Build the ORDER BY portion of the query.'''
    order_by = []

    if args.reverse:
        order_by += ['name DESC']

    if args.sort_largest:
        order_by += ['size DESC']

    if args.mtime:
        order_by += ['mtime DESC']

    if len(order_by) == 0:
        return ['name ASC']

    return order_by

if __name__=='__main__':
    cwd = os.getcwd()

    parser = argparse.ArgumentParser(description='GUFI version of ls')
    parser.add_argument('-a', '--all',                     dest='all',            action='store_true',         help='do not ignore entries starting with .')
    parser.add_argument('-B', '--ignore-backups',          dest='ignore_backups', action='store_true',         help='do not list implied entries ending with ~')
    parser.add_argument('-G', '--no-group',                dest='no_group',       action='store_true',         help='in a long listing, don\'t print group names')
    parser.add_argument('-i', '--inode',                   dest='inode',          action='store_true',         help='print the index number of each file')
    parser.add_argument('-l',                              dest='long_listing',   action='store_true',         help='use a long listing format')
    parser.add_argument('-r', '--reverse',                 dest='reverse',        action='store_true',         help='reverse order while sorting')
    parser.add_argument('-R', '--recursive',               dest='recursive',      action='store_true',         help='list subdirectories recursively')
    parser.add_argument('-s', '--size',                    dest='size',           action='store_true',         help='print the allocated size of each file, in blocks')
    parser.add_argument('-S',                              dest='sort_largest',   action='store_true',         help='sort by file size, largest first')
    parser.add_argument('-t',                              dest='mtime',          action='store_true',         help='sort by modification time, newest first')

    # GUFI specific arguments
    parser.add_argument('--delim',            metavar='c', dest='delim',          type=qb.check_char,          help='delimiter separating output columns')
    parser.add_argument('--num_results',      metavar='n', dest='num_results',    type=qb.check_non_negative,  help='first n results')
    parser.add_argument('GUFI_tree',                                              default=[cwd],   nargs='*',  help='path containing GUFI tree database file')

    args = parser.parse_args();

    where = build_where(args)
    order_by = build_order_by(args)

    first_query = qb.build_query(build_select(args),
                                  ['entries'],
                                  where,
                                  None,
                                  order_by,
                                  args.num_results)
    second_query = qb.build_query(build_aggregate_select(args),
                                   ['entries'],
                                   where,
                                   None,
                                   order_by,
                                   args.num_results)

    rc = 0
    for path in args.GUFI_tree:
        # create the bfq command
        bfq_cmd = ['{}/bfq'.format(os.path.dirname(os.path.realpath(__file__))),
                   '-p', '-P',
                   '-E', first_query,
                   '-G', second_query,
                   path,
                   '-z', '-1' if args.recursive else '1']

        if args.delim:
            bfq_cmd += ['-d', args.delim]

        bfq = subprocess.Popen(bfq_cmd)
        bfq.communicate() # block until bfq finishes

        if bfq.returncode != 0:
            rc = bfq.returncode

    sys.exit(rc)
