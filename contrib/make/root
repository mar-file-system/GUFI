CC                   ?= cc
CXX                  ?= c++
CFLAGS               ?= -std=gnu99
CXXFLAGS             ?= -std=c++11
LDFLAGS              ?= -ldl -lm
LIB                   = GUFI

CFLAGS               += -I$(realpath include)
CXXFLAGS             += -I$(realpath include)

PCRE_CFLAGS          ?= $(shell pkg-config --cflags libpcre)
PCRE_LDFLAGS         ?= $(shell pkg-config --libs   libpcre)

# different fuse libs for OSX/Linux
ifeq ($(UNAME_S), Darwin)
	FUSE_PKG = osxfuse
else
	FUSE_PKG = fuse
endif

FUSE_CFLAGS          ?= $(shell pkg-config --cflags $(FUSE_PKG))
FUSE_LDFLAGS         ?= $(shell pkg-config --libs   $(FUSE_PKG))

MYSQL_CFLAGS         ?= $(shell mysql_config --include)
MYSQL_LDFLAGS        ?= $(shell mysql_config --libs_r)

MAKEFILE_PATH         = $(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))

DEP_DOWNLOAD_PREFIX  ?= $(MAKEFILE_PATH)/contrib/deps
DEP_BUILD_PREFIX     ?= $(MAKEFILE_PATH)/deps/build
DEP_INSTALL_PREFIX   ?= $(MAKEFILE_PATH)/deps/install

SQLITE3_PATH         ?= $(DEP_INSTALL_PREFIX)/sqlite3
SQLITE3_CFLAGS       ?= -I$(SQLITE3_PATH)/include
SQLITE3_LDFLAGS      ?=
SQLITE3_LIB          ?= $(SQLITE3_PATH)/lib/libsqlite3.a

SQLITE3_PCRE_PATH    ?= $(DEP_INSTALL_PREFIX)/sqlite3-pcre
SQLITE3_PCRE_CFLAGS  ?= -I$(SQLITE3_PCRE_PATH) $(SQLITE3_CFLAGS) $(PCRE_CFLAGS)
SQLITE3_PCRE_LDFLAGS ?= $(PCRE_LDFLAGS)
SQLITE3_PCRE_LIB     ?= $(SQLITE3_PCRE_PATH)/libsqlite3-pcre.a

JEMALLOC_PATH        ?= $(DEP_INSTALL_PREFIX)/jemalloc
JEMALLOC_CFLAGS      ?= -I$(JEMALLOC_PATH)/include
JEMALLOC_LDFLAGS     ?=
JEMALLOC_LIB         ?= $(JEMALLOC_PATH)/lib/libjemalloc.a

CFLAGS               += $(SQLITE3_PCRE_CFLAGS)
CXXFLAGS             += $(SQLITE3_PCRE_CFLAGS)
LDFLAGS              += $(SQLITE3_PCRE_LDFLAGS) -pthread
STATIC_DEPS           = ${SQLITE3_PCRE_LIB} ${SQLITE3_LIB} $(JEMALLOC_LIB)

# CFLAGS += -std=c11 -D_POSIX_C_SOURCE=2
ifneq ($(DEBUG),)
	CFLAGS   += -Wall -g -O0 -DDEBUG
	CXXFLAGS += -Wall -g -O0 -DDEBUG
else
	CFLAGS   += -O3
	CXXFLAGS += -O3
endif

# --- DARWIN
UNAME_S = $(shell uname -s)
ifeq ($(UNAME_S), Darwin)
	CFLAGS   += -D_DARWIN_C_SOURCE -DCONFIG_SYS_XATTR_H -DCONFIG_DARWIN_XATTRS
	CXXFLAGS += -D_DARWIN_C_SOURCE -DCONFIG_SYS_XATTR_H -DCONFIG_DARWIN_XATTRS
else
	CFLAGS   += -DCONFIG_ATTR_XATTR_H -DCONFIG_GNU_XATTRS
	CXXFLAGS += -DCONFIG_ATTR_XATTR_H -DCONFIG_GNU_XATTRS
endif

# this is invoked in a recursive build, for bfmi.mysql
# (see target "%.mysql")
# bfmi currently uses *both* sqlite3 and mysql!
ifeq ($(MYSQL),)
	LIBFILES += dbutils
else
	CFLAGS  += $(MYSQL_CFLAGS)
	LDFLAGS += $(MYSQL_LDFLAGS)
endif

ifneq ($(FUSE),)
	CFLAGS  += $(FUSE_CFLAGS)
	LDFLAGS += $(FUSE_LDFLAGS)
endif

.PHONY: googletest

# let sub-makefiles use these variables
export

all: $(STATIC_DEPS)
	$(MAKE) -C src
	$(MAKE) -C scripts
	$(MAKE) -C contrib

$(STATIC_DEPS): contrib/deps/install_deps.sh
	mkdir -p "$(DEP_DOWNLOAD_PREFIX)" "$(DEP_BUILD_PREFIX)" "$(DEP_INSTALL_PREFIX)"
	contrib/deps/install_deps.sh --cxx --paramiko "$(DEP_DOWNLOAD_PREFIX)" "$(DEP_BUILD_PREFIX)" "$(DEP_INSTALL_PREFIX)"

clean:
	$(MAKE) -C "$(DEP_BUILD_PREFIX)"
	$(MAKE) -C src clean

test: all
	$(MAKE) -C test

clean_test:
	$(MAKE) -C test clean
