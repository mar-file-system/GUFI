# libGUFI files
LIBFILES = bf dbutils debug outfiles outdbs OutputBuffers QueuePerThreadPool SinglyLinkedList template_db trace utils

LIB_C = $(addsuffix .c,$(LIBFILES))
LIB_O = $(addsuffix .o,$(LIBFILES))
LIB_H = $(addsuffix .h,$(LIBFILES))
LIB_A = lib$(LIB).a

# executables
DFW       = dfw
BFW       = bfti bfwreaddirplus2db gufi_dir2trace gufi_dir2index gufi_stat gufi_trace2index gufi_query querydbs
BFW_MYSQL = bfmi.mysql
ifneq ("$(CXX)", "false")
CXX_TOOLS =
endif
TARGETS   = $(DFW) $(BFW) $(CXX_TOOLS)

all: $(TARGETS)

%.o: %.c $(LIB_H)
	$(CC) $(CFLAGS) -c $< -o $@

# --- library

$(LIB_A): $(LIB_O)
	ar -rs $@ $^

# --- apps

%: %.c $(LIB_A) $(STATIC_DEPS)
	$(CC) $(CFLAGS) $^ $(LDFLAGS) -o $@

ifneq ("$(CXX)", "false")
%: %.cpp $(LIB_A) $(STATIC_DEPS)
	$(CXX) $(CFLAGS) $(CXXFLAGS) $^ $(LDFLAGS) -o $@
endif

# recursive make of the '%' part
# recursive make will catch the ifneq ($(MYSQL),) ... above
%.mysql:
	$(MAKE) -C . $* MYSQL=1

clean:
	rm -f $(LIB_O) $(LIB_A) $(TARGETS)
	rm -f *~
	rm -rf *.dSYM
	rm -rf core.*
	@ # for F in `ls *.c | sed -e 's/\.c$//'`; do [ -f $F ] && rm $F; done
	@ # final "echo" is so sub-shell will return success
	@ (for F in `ls *.c* | sed -e 's/\.c.*$$//'`; do [ -f $$F ] && (echo rm $$F; rm $$F); done; echo done > /dev/null)
