---------------------------------------------------------------------------
sqlite3_reset() no longer needed after sqlite3_step() ?

Might save some performance to remove it.
(e.g. in dfwrplusdb.c)
See https://sqlite.org/capi3ref.html#sqlite3_step
[macports gave me sqlite3 v3.20.1]


---------------------------------------------------------------------------
series of developments through app versions
dfw, dfwrplus, dfwrplusdb, dfwrplusdbthreads, etc.

Are these just intended as artifacts of development, or are they intended
to allow e.g. timing to see the relative burden from adding new features?

Would we rather have a single executable that could be built, or have
command-line parms, to exercise these different features in a single app,
to avoid having to maintain them all in parallel?


---------------------------------------------------------------------------
race condition?

In dfwrplusdbthreads.c, in listdir(), after waiting for runningthreads ==
0, we aqcuire the lock and set runningthreads = 1.  Could someone else do
the same thing?

We should really do something like this:

       while (1) {
         pthread_mutex_lock(&running_mutex);
         myrunningthreads=runningthreads;
         if (myrunningthreads == 0 ) {
               break;
         }
         pthread_mutex_unlock(&running_mutex);
       }

       runningthreads=1;
       pthread_mutex_unlock(&running_mutex);

[The same issue occurs in two different spots.]


---------------------------------------------------------------------------
more-efficient busy-loop?

In dfwrplusdbthreads.c, in listdir(), we could call sched_yield() when
myrunningthreads > 0.

[after the unlock, inside the loop, in the example above]


---------------------------------------------------------------------------
As Gary mentioned, we could pull long-lived threads from a pool

... instead of creating a thread for every task.


---------------------------------------------------------------------------
learned something

creating threads as detached makes their termination release resources
immediately.  Nobody needs to join them.


---------------------------------------------------------------------------
quicker comparison function, for qsort in dfwrplusdbthreadsort.c

// Returns {1,0,-1}, for {>,==,<}
int no_cond(const void * a, const void * b) {
   long long int a1 = *(long long int*)a;
   long long int b1 = *(long long int*)b;

   return ( (a1 > b1) - (a1 < b1) );
}


---------------------------------------------------------------------------
in bfw.c, faster to just memcpy the entire stat struct?

and use ptrs instead of sprintf()?
same thing in push() in structq.c


---------------------------------------------------------------------------
in bfw.c, why use locks (i.e. startlock) to assure thread has started?

Q: It's started in detached mode, anyhow.  If the point is to protect
information that will be copied from global to local by the thread at
startup, shouldn't that just be encapsulated as arguments?

A: Oh, I see.  In e.g. bfw.c, main copies from the queue-element to local
<mywork>, then passes that to the thread.  The thread must copy *that* to
local values before main can reuse <mywork>.

IMPROVEMENT: just pass the queue-element to the thread.  Then main doesn't
have to wait, and we reduce the amount of copying.  Thread must be sure to
free the queue-elt.
-----------------------------------------------------------------------
building bfwreaddirplus2db
general readdirplus program that reads a dir and writes an sqlite db with
path, type, inode, pinode
this can be used to capture a tree (not stat info) to help detect changes
from period to period about what is in a tree
added insertfl and insertdirs into the input options so in bfwreaddirplus2db
you can tell it to write dirs only or files/links only records into the output db
this is likely to be useful for incrementals where you may not care about files or links
------------------------------------------------------------------------
made db.db (the name of the gufi databases in the tree) a define in bf.h
------------------------------------------------------------------------
added a dontdescend in the input parms so that bfwi can be told to just make a gufi db
out of one level and added that to bfwi so it will only do one level of the directory
changed bfwi so that -D will just do one level gufi db
------------------------------------------------------------------------
added input variable buildinindir  to notice when we are building the gufi dbs directly into the input dir
some people will want to do this and so we wanted to notice that this was being asked for and save
some work by not recreating the input directory structure into the output since they are they same,
so bfwi was changed to add a test for this in validate input routine and set this flag if 
you have asked for this and dupdir is skipped
------------------------------------------------------------------------
added flags to bfwreaddirplus2db -Y defauilt suspect field to on for directories, -Z default suspect field to on for file and link
suspect field in the database output is for flaging entries with if suspect or not based on some fact about the entry
added flag -W inputsuspect file, which would contain a list of suspect inodes for dirs and files used to determine if an entry
in the output database is suspect
added flag -g to allow you to control stride size if you want to stripe inodes into output dbs
Added flag -A to allow you to control suspect method 0 none, 1 file with suspect fld, 2 file with suspect fl and stat dirs, and 3 stat fld 
Added flag -c to allow you to input a number of seconds since epoch for suspect comparison 
-----------------------------------------------------------------------
adding flag to to indicate provide input file into bfwi so it can create a gufi tree from a text file delmited
adding capability to read that file in paralle with threads instead of readdir/stat of source tree
------------------------------------------------------------------------------
Added fpath() sql query function to get full path as an sql variable you can use
--------------------------------------------------------------------------------
Added -t flag to bfreaddirplus2db to_dir to control if and where gufi dbs are created for suspect directories
Added -x flag to bfreaddirplus2db to specify if xattrs are to be collected if making an output gufi db per suspect directory 
----------------------------------------------------------------------------------
Build bfresultfuse to allow running a fuse daemon (mounted file system) over the output of a properly formed bfq query that produces output dbs)
-----------------------------------------------------------------------------------
Build bffuse to allow mounting of a gufi tree as a fuse mounted file system and honor sql queries provided in users $home/.bffusesql
made makebffuse to compile it
-----------------------------------------------------------------------------------
added -t and -x flags to bfwreaddirplus to provide a directory and whether
to get xattrs when creating gufi dbs for suspect dirs named inode of suspect dir
-----------------------------------------------------------------------------------
added another open type to opendb in dbutils.c
--------------------------------------------------------------------
fixed test/runbfqforfuse was pointed at /tmp bfq db
still dont see why it wont work unless you run it in debug mode
-------------------------------------------------------------------
created runbffuse to run bfwi to create a gufi, run bfq to show the gufi, then run bffuse over the gufi
-------------------------------------------------------------------
added -d and -o t allow bfwreaddirplus2db to write output files in addition to output dbs and removed -p and -P for printing
added testcases in test/runbfwreaddirplus2db to test this
changed README to reflect these changes
-----------------------------------------------------------------
added options to dfw to make it useful for loading gufi tree using bfwi -u load from flat file
added common output routine printload to utils.c to enable writing of records for loading using bfwi -u
modified bfwi -o to use output that is suitable for using bfwi -u load from flat file
added dfw2gufitest and bfwiflat2gufitest python scripts to test each of these functions
updated README
updated gufimaster doc to V2
---------------------------------------------------
updated bfwreaddirplus2db added sortfield to output file to make sorting for bfwi load from flat easy as you sort on sortfield and then type
--------------------------------------------------
updated rundfw due to changes in dfw
------------------------------------------
updated runbfwreaddirplus2db to enable running from gufitest.py
-------------------------------------------
updated bfwi.c readlink processing processing
-------------------------------------------
updated bfwreaddirplus2db.c fix xattr processing in reprocessdir for suspect dirs
-------------------------------------
minor fix to bfq.c to check for existence of tree index in a mroe reasonable way
---------------------------------
minor fix to querydbn.c  to control the output to be more reasonable
----------------------------------------
built test/gufitest.py
it has a bunch of correctness tests in python
and also enables you to run most of the most important functional scripts (runbfq,runbfwi,rundfw,runbfti,runquerydbn,runbquerydb,etc)
builds a tree in /tmp and runs all tests in tmp and cleans up after itself so you dont have test stuff in the src dir
---------------------------------------------
fixed a ton of stuff in test and scripts directories - mostly transparent but allows scripts and tests to run
______________________________________________________
update of bfq to allow for the top directory where we start to be a link to a dir as well as a dir
___________________________________________
wrote a way to convert dates for use in tsm queries and get dates from tsm query into a usable form for compare
